"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @hidden
 */
var AadAuthority_1 = require("./AadAuthority");
var B2cAuthority_1 = require("./B2cAuthority");
var Authority_1 = require("./Authority");
var StringUtils_1 = require("../utils/StringUtils");
var UrlUtils_1 = require("../utils/UrlUtils");
var ClientConfigurationError_1 = require("../error/ClientConfigurationError");
var AuthorityFactory = /** @class */ (function () {
    function AuthorityFactory() {
    }
    /**
     * Use when Authority is B2C and validateAuthority is set to True to provide list of allowed domains.
     */
    AuthorityFactory.setKnownAuthorities = function (validateAuthority, knownAuthorities) {
        if (validateAuthority && !Object.keys(B2cAuthority_1.B2CTrustedHostList).length) {
            knownAuthorities.forEach(function (authority) {
                B2cAuthority_1.B2CTrustedHostList[authority] = authority;
            });
        }
    };
    /**
     * Parse the url and determine the type of authority
     */
    AuthorityFactory.detectAuthorityFromUrl = function (authorityUrl) {
        authorityUrl = UrlUtils_1.UrlUtils.CanonicalizeUri(authorityUrl);
        var components = UrlUtils_1.UrlUtils.GetUrlComponents(authorityUrl);
        var pathSegments = components.PathSegments;
        if (pathSegments[0] === "adfs") {
            return Authority_1.AuthorityType.Adfs;
        }
        else if (Object.keys(B2cAuthority_1.B2CTrustedHostList).length) {
            return Authority_1.AuthorityType.B2C;
        }
        // Defaults to Aad
        return Authority_1.AuthorityType.Aad;
    };
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)
     */
    AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {
        if (StringUtils_1.StringUtils.isEmpty(authorityUrl)) {
            return null;
        }
        var type = AuthorityFactory.detectAuthorityFromUrl(authorityUrl);
        // Depending on above detection, create the right type.
        switch (type) {
            case Authority_1.AuthorityType.B2C:
                return new B2cAuthority_1.B2cAuthority(authorityUrl, validateAuthority);
            case Authority_1.AuthorityType.Aad:
                return new AadAuthority_1.AadAuthority(authorityUrl, validateAuthority);
            default:
                throw ClientConfigurationError_1.ClientConfigurationError.createInvalidAuthorityTypeError();
        }
    };
    return AuthorityFactory;
}());
exports.AuthorityFactory = AuthorityFactory;
//# sourceMappingURL=AuthorityFactory.js.map