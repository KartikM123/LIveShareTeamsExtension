{"version":3,"sources":["webpack://Msal/webpack/universalModuleDefinition","webpack://Msal/webpack/bootstrap","webpack://Msal/./node_modules/tslib/tslib.es6.js","webpack://Msal/./src/utils/Constants.ts","webpack://Msal/./src/utils/CryptoUtils.ts","webpack://Msal/./src/utils/StringUtils.ts","webpack://Msal/./src/error/ClientConfigurationError.ts","webpack://Msal/./src/utils/UrlUtils.ts","webpack://Msal/./src/error/ClientAuthError.ts","webpack://Msal/./src/error/AuthError.ts","webpack://Msal/./src/authority/Authority.ts","webpack://Msal/./src/telemetry/TelemetryConstants.ts","webpack://Msal/./src/telemetry/TelemetryUtils.ts","webpack://Msal/./src/ScopeSet.ts","webpack://Msal/./src/telemetry/TelemetryEvent.ts","webpack://Msal/./src/Logger.ts","webpack://Msal/./src/error/ServerError.ts","webpack://Msal/./src/UserAgentApplication.ts","webpack://Msal/./src/ServerRequestParameters.ts","webpack://Msal/./src/utils/TokenUtils.ts","webpack://Msal/./src/Account.ts","webpack://Msal/./src/utils/WindowUtils.ts","webpack://Msal/./src/utils/TimeUtils.ts","webpack://Msal/./src/XHRClient.ts","webpack://Msal/./src/telemetry/HttpEvent.ts","webpack://Msal/./src/Configuration.ts","webpack://Msal/./src/error/InteractionRequiredAuthError.ts","webpack://Msal/./src/AuthResponse.ts","webpack://Msal/./src/telemetry/ApiEvent.ts","webpack://Msal/./src/index.ts","webpack://Msal/./src/cache/AccessTokenKey.ts","webpack://Msal/./src/cache/AccessTokenValue.ts","webpack://Msal/./src/ClientInfo.ts","webpack://Msal/./src/IdToken.ts","webpack://Msal/./src/cache/AuthCache.ts","webpack://Msal/./src/cache/AccessTokenCacheItem.ts","webpack://Msal/./src/cache/BrowserStorage.ts","webpack://Msal/./src/utils/RequestUtils.ts","webpack://Msal/./src/utils/ResponseUtils.ts","webpack://Msal/./src/authority/AuthorityFactory.ts","webpack://Msal/./src/authority/AadAuthority.ts","webpack://Msal/./src/authority/B2cAuthority.ts","webpack://Msal/./src/telemetry/TelemetryManager.ts","webpack://Msal/./src/telemetry/DefaultEvent.ts","webpack://Msal/./src/AuthenticationParameters.ts"],"names":[],"mappings":"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","file":"msal.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Msal\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Msal\"] = factory();\n\telse\n\t\troot[\"Msal\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * Constants\r\n */\r\nexport class Constants {\r\n    static get libraryName(): string { return \"Msal.js\"; } // used in telemetry sdkName\r\n    static get claims(): string { return \"claims\"; }\r\n    static get clientId(): string { return \"clientId\"; }\r\n\r\n    static get adalIdToken(): string { return \"adal.idtoken\"; }\r\n    static get cachePrefix(): string { return \"msal\"; }\r\n    static get scopes(): string { return \"scopes\"; }\r\n\r\n    static get no_account(): string { return \"NO_ACCOUNT\"; }\r\n    static get upn(): string { return \"upn\"; }\r\n    static get domain_hint(): string { return \"domain_hint\"; }\r\n\r\n    static get prompt_select_account(): string { return \"&prompt=select_account\"; }\r\n    static get prompt_none(): string { return \"&prompt=none\"; }\r\n    static get prompt(): string { return \"prompt\"; }\r\n\r\n    static get response_mode_fragment(): string { return \"&response_mode=fragment\"; }\r\n    static get resourceDelimiter(): string { return \"|\"; }\r\n    static get cacheDelimiter(): string { return \".\"; }\r\n\r\n    private static _popUpWidth: number = 483;\r\n    static get popUpWidth(): number { return this._popUpWidth; }\r\n    static set popUpWidth(width: number) {\r\n        this._popUpWidth = width;\r\n    }\r\n    private static _popUpHeight: number = 600;\r\n    static get popUpHeight(): number { return this._popUpHeight; }\r\n    static set popUpHeight(height: number) {\r\n        this._popUpHeight = height;\r\n    }\r\n\r\n    static get login(): string { return \"LOGIN\"; }\r\n    static get renewToken(): string { return \"RENEW_TOKEN\"; }\r\n    static get unknown(): string { return \"UNKNOWN\"; }\r\n\r\n    static get homeAccountIdentifier(): string { return \"homeAccountIdentifier\"; }\r\n\r\n    static get common(): string { return \"common\"; }\r\n    static get openidScope(): string { return \"openid\"; }\r\n    static get profileScope(): string { return \"profile\"; }\r\n\r\n    static get interactionTypeRedirect(): InteractionType { return \"redirectInteraction\"; }\r\n    static get interactionTypePopup(): InteractionType { return \"popupInteraction\"; }\r\n    static get interactionTypeSilent(): InteractionType { return \"silentInteraction\"; }\r\n    static get inProgress(): string { return \"inProgress\"; }\r\n}\r\n\r\n/**\r\n * Keys in the hashParams\r\n */\r\nexport enum ServerHashParamKeys {\r\n    SCOPE = \"scope\",\r\n    STATE = \"state\",\r\n    ERROR = \"error\",\r\n    ERROR_DESCRIPTION = \"error_description\",\r\n    ACCESS_TOKEN = \"access_token\",\r\n    ID_TOKEN = \"id_token\",\r\n    EXPIRES_IN = \"expires_in\",\r\n    SESSION_STATE = \"session_state\",\r\n    CLIENT_INFO = \"client_info\"\r\n};\r\n\r\n/**\r\n * @hidden\r\n * CacheKeys for MSAL\r\n */\r\nexport enum TemporaryCacheKeys {\r\n    AUTHORITY = \"authority\",\r\n    ACQUIRE_TOKEN_ACCOUNT = \"acquireTokenAccount\",\r\n    SESSION_STATE = \"session.state\",\r\n    STATE_LOGIN = \"state.login\",\r\n    STATE_ACQ_TOKEN = \"state.acquireToken\",\r\n    STATE_RENEW = \"state.renew\",\r\n    NONCE_IDTOKEN = \"nonce.idtoken\",\r\n    LOGIN_REQUEST = \"login.request\",\r\n    RENEW_STATUS = \"token.renew.status\",\r\n    URL_HASH = \"urlHash\",\r\n    INTERACTION_STATUS = \"interaction_status\",\r\n    REDIRECT_REQUEST = \"redirect_request\"\r\n}\r\n\r\nexport enum PersistentCacheKeys {\r\n    IDTOKEN = \"idtoken\",\r\n    CLIENT_INFO = \"client.info\"\r\n}\r\n\r\nexport enum ErrorCacheKeys {\r\n    LOGIN_ERROR = \"login.error\",\r\n    ERROR = \"error\",\r\n    ERROR_DESC = \"error.description\"\r\n}\r\n\r\nexport const AADTrustedHostList =  {\r\n    \"login.windows.net\": \"login.windows.net\",\r\n    \"login.chinacloudapi.cn\": \"login.chinacloudapi.cn\",\r\n    \"login.cloudgovapi.us\": \"login.cloudgovapi.us\",\r\n    \"login.microsoftonline.com\": \"login.microsoftonline.com\",\r\n    \"login.microsoftonline.de\": \"login.microsoftonline.de\",\r\n    \"login.microsoftonline.us\": \"login.microsoftonline.us\"\r\n};\r\n\r\n/**\r\n * @hidden\r\n * SSO Types - generated to populate hints\r\n */\r\nexport enum SSOTypes {\r\n    ACCOUNT = \"account\",\r\n    SID = \"sid\",\r\n    LOGIN_HINT = \"login_hint\",\r\n    ID_TOKEN =\"id_token\",\r\n    ACCOUNT_ID = \"accountIdentifier\",\r\n    HOMEACCOUNT_ID = \"homeAccountIdentifier\"\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const BlacklistedEQParams = [\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n\r\nexport type InteractionType = \"redirectInteraction\" | \"popupInteraction\" | \"silentInteraction\";\r\n\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n * @hidden\r\n */\r\nexport const PromptState = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\"\r\n};\r\n\r\n/**\r\n * Frame name prefixes for the hidden iframe created in silent frames\r\n */\r\nexport const FramePrefix = {\r\n    ID_TOKEN_FRAME: \"msalIdTokenFrame\",\r\n    TOKEN_FRAME: \"msalRenewFrame\"\r\n};\r\n\r\n/**\r\n * MSAL JS Library Version\r\n */\r\nexport function libraryVersion(): string {\r\n    return \"1.3.1\";\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class CryptoUtils {\r\n\r\n    /**\r\n     * Creates a new random GUID\r\n     * @returns string (GUID)\r\n     */\r\n    static createNewGuid(): string {\r\n        /*\r\n         * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n         * pseudo-random numbers.\r\n         * The algorithm is as follows:\r\n         *     Set the two most significant bits (bits 6 and 7) of the\r\n         *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n         *     Set the four most significant bits (bits 12 through 15) of the\r\n         *        time_hi_and_version field to the 4-bit version number from\r\n         *        Section 4.1.3. Version4\r\n         *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n         *     values.\r\n         * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n         * time-low               = 4hexOctet\r\n         * time-mid               = 2hexOctet\r\n         * time-high-and-version  = 2hexOctet\r\n         * clock-seq-and-reserved = hexOctet:\r\n         * clock-seq-low          = hexOctet\r\n         * node                   = 6hexOctet\r\n         * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n         * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n         * y values are 8, 9, A, B\r\n         */\r\n\r\n        const cryptoObj: Crypto = window.crypto; // for IE 11\r\n        if (cryptoObj && cryptoObj.getRandomValues) {\r\n            const buffer: Uint8Array = new Uint8Array(16);\r\n            cryptoObj.getRandomValues(buffer);\r\n\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n\r\n            return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])\r\n                + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])\r\n                + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])\r\n                + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\r\n        }\r\n        else {\r\n            const guidHolder: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            const hex: string = \"0123456789abcdef\";\r\n            let r: number = 0;\r\n            let guidResponse: string = \"\";\r\n            for (let i: number = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                } else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                } else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    static isGuid(guid: string) {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n\r\n    /**\r\n     * Decimal to Hex\r\n     *\r\n     * @param num\r\n     */\r\n    static decimalToHex(num: number): string {\r\n        let hex: string = num.toString(16);\r\n        while (hex.length < 2) {\r\n            hex = \"0\" + hex;\r\n        }\r\n        return hex;\r\n    }\r\n\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\r\n\r\n    /**\r\n     * encoding string to base64 - platform specific check\r\n     *\r\n     * @param input\r\n     */\r\n    static base64Encode(input: string): string {\r\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\r\n            function toSolidBytes(match, p1) {\r\n                return String.fromCharCode(Number(\"0x\" + p1));\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Decodes a base64 encoded string.\r\n     *\r\n     * @param input\r\n     */\r\n    static base64Decode(input: string): string {\r\n        let encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n\r\n        return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(\"\"));\r\n    }\r\n\r\n    /**\r\n     * deserialize a string\r\n     *\r\n     * @param query\r\n     */\r\n    static deserialize(query: string): any {\r\n        let match: Array<string>; // Regex for replacing addition symbol with a space\r\n        const pl = /\\+/g;\r\n        const search = /([^&=]+)=([^&]*)/g;\r\n        const decode = (s: string) => decodeURIComponent(s.replace(pl, \" \"));\r\n        const obj: {} = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            // Some values (e.g. state) may need to be decoded twice\r\n            obj[decode(match[1])] = decode(decode(match[2]));\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class StringUtils {\r\n    /**\r\n     * Check if a string is empty\r\n     *\r\n     * @param str\r\n     */\r\n    static isEmpty(str: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { ClientAuthError } from \"./ClientAuthError\";\r\nimport { TelemetryOptions } from \"../Configuration\";\r\n\r\nexport const ClientConfigurationErrorMessage = {\r\n    configurationNotSet: {\r\n        code: \"no_config_set\",\r\n        desc: \"Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object.\"\r\n    },\r\n    storageNotSupported: {\r\n        code: \"storage_not_supported\",\r\n        desc: \"The value for the cacheLocation is not supported.\"\r\n    },\r\n    noRedirectCallbacksSet: {\r\n        code: \"no_redirect_callbacks\",\r\n        desc: \"No redirect callbacks have been set. Please call handleRedirectCallback() with the appropriate function arguments before continuing. \" +\r\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    invalidCallbackObject: {\r\n        code: \"invalid_callback_object\",\r\n        desc: \"The object passed for the callback was invalid. \" +\r\n          \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    scopesRequired: {\r\n        code: \"scopes_required\",\r\n        desc: \"Scopes are required to obtain an access token.\"\r\n    },\r\n    emptyScopes: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as empty array.\"\r\n    },\r\n    nonArrayScopes: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientScope: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent' and 'none'\",\r\n    },\r\n    invalidAuthorityType: {\r\n        code: \"invalid_authority_type\",\r\n        desc: \"The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.\"\r\n    },\r\n    authorityUriInvalidPath: {\r\n        code: \"authority_uri_invalid_path\",\r\n        desc: \"Given authority URI is invalid.\"\r\n    },\r\n    unsupportedAuthorityValidation: {\r\n        code: \"unsupported_authority_validation\",\r\n        desc: \"The authority validation is not supported for this authority type.\"\r\n    },\r\n    untrustedAuthority: {\r\n        code: \"untrusted_authority\",\r\n        desc: \"The provided authority is not a trusted authority. If using B2C, please include this authority in the knownAuthorities config parameter.\"\r\n    },\r\n    b2cAuthorityUriInvalidPath: {\r\n        code: \"b2c_authority_uri_invalid_path\",\r\n        desc: \"The given URI for the B2C authority is invalid.\"\r\n    },\r\n    b2cKnownAuthoritiesNotSet: {\r\n        code: \"b2c_known_authorities_not_set\",\r\n        desc: \"Must set known authorities when validateAuthority is set to True and using B2C\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    emptyRequestError: {\r\n        code: \"empty_request_error\",\r\n        desc: \"Request object is required.\"\r\n    },\r\n    invalidCorrelationIdError: {\r\n        code: \"invalid_guid_sent_as_correlationId\",\r\n        desc: \"Please set the correlationId as a valid guid\"\r\n    },\r\n    telemetryConfigError: {\r\n        code: \"telemetry_config_error\",\r\n        desc: \"Telemetry config is not configured with required values\"\r\n    },\r\n    ssoSilentError: {\r\n        code: \"sso_silent_error\",\r\n        desc: \"request must contain either sid or login_hint\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in configuration of the .js library.\r\n */\r\nexport class ClientConfigurationError extends ClientAuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n\r\n    static createNoSetConfigurationError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.configurationNotSet.code,\r\n            `${ClientConfigurationErrorMessage.configurationNotSet.desc}`);\r\n    }\r\n\r\n    static createStorageNotSupportedError(givenCacheLocation: string) : ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.storageNotSupported.code,\r\n            `${ClientConfigurationErrorMessage.storageNotSupported.desc} Given location: ${givenCacheLocation}`);\r\n    }\r\n\r\n    static createRedirectCallbacksNotSetError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.noRedirectCallbacksSet.code, ClientConfigurationErrorMessage.noRedirectCallbacksSet.desc);\r\n    }\r\n\r\n    static createInvalidCallbackObjectError(callbackObject: object): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCallbackObject.code,\r\n            `${ClientConfigurationErrorMessage.invalidCallbackObject.desc} Given value for callback function: ${callbackObject}`);\r\n    }\r\n\r\n    static createEmptyScopesArrayError(scopesValue: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopes.code,\r\n            `${ClientConfigurationErrorMessage.emptyScopes.desc} Given value: ${scopesValue}.`);\r\n    }\r\n\r\n    static createScopesNonArrayError(scopesValue: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopes.code,\r\n            `${ClientConfigurationErrorMessage.nonArrayScopes.desc} Given value: ${scopesValue}.`);\r\n    }\r\n\r\n    static createClientIdSingleScopeError(scopesValue: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientScope.code,\r\n            `${ClientConfigurationErrorMessage.clientScope.desc} Given value: ${scopesValue}.`);\r\n    }\r\n\r\n    static createScopesRequiredError(scopesValue: any): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.scopesRequired.code,\r\n            `${ClientConfigurationErrorMessage.scopesRequired.desc} Given value: ${scopesValue}`);\r\n    }\r\n\r\n    static createInvalidPromptError(promptValue: any): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\r\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\r\n    }\r\n\r\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\r\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\r\n    }\r\n\r\n    static createEmptyRequestError(): ClientConfigurationError {\r\n        const { code, desc } = ClientConfigurationErrorMessage.emptyRequestError;\r\n        return new ClientConfigurationError(code, desc);\r\n    }\r\n\r\n    static createInvalidCorrelationIdError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCorrelationIdError.code,\r\n            ClientConfigurationErrorMessage.invalidCorrelationIdError.desc);\r\n    }\r\n\r\n    static createKnownAuthoritiesNotSetError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.b2cKnownAuthoritiesNotSet.code,\r\n            ClientConfigurationErrorMessage.b2cKnownAuthoritiesNotSet.desc);\r\n    }\r\n\r\n    static createInvalidAuthorityTypeError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityType.code,\r\n            ClientConfigurationErrorMessage.invalidAuthorityType.desc);\r\n    }\r\n\r\n    static createUntrustedAuthorityError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\r\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\r\n    }\r\n\r\n    static createTelemetryConfigError(config: TelemetryOptions): ClientConfigurationError {\r\n        const { code, desc } = ClientConfigurationErrorMessage.telemetryConfigError;\r\n        const requiredKeys = {\r\n            applicationName: \"string\",\r\n            applicationVersion: \"string\",\r\n            telemetryEmitter: \"function\"\r\n        };\r\n\r\n        const missingKeys = Object.keys(requiredKeys)\r\n            .reduce((keys, key) => {\r\n                return config[key] ? keys : keys.concat([ `${key} (${requiredKeys[key]})` ]);\r\n            }, []);\r\n\r\n        return new ClientConfigurationError(code, `${desc} mising values: ${missingKeys.join(\",\")}`);\r\n    }\r\n\r\n    static createSsoSilentError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.ssoSilentError.code,\r\n            ClientConfigurationErrorMessage.ssoSilentError.desc);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IUri } from \"../IUri\";\r\nimport { Constants, SSOTypes, ServerHashParamKeys } from \"./Constants\";\r\nimport { ServerRequestParameters } from \"../ServerRequestParameters\";\r\nimport { ScopeSet } from \"../ScopeSet\";\r\nimport { StringUtils } from \"./StringUtils\";\r\nimport { CryptoUtils } from \"./CryptoUtils\";\r\nimport { ClientConfigurationError } from \"./../error/ClientConfigurationError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class UrlUtils {\r\n\r\n    /**\r\n     * generates the URL with QueryString Parameters\r\n     * @param scopes\r\n     */\r\n    static createNavigateUrl(serverRequestParams: ServerRequestParameters): string {\r\n        const str = this.createNavigationUrlString(serverRequestParams);\r\n        let authEndpoint: string = serverRequestParams.authorityInstance.AuthorizationEndpoint;\r\n        // if the endpoint already has queryparams, lets add to it, otherwise add the first one\r\n        if (authEndpoint.indexOf(\"?\") < 0) {\r\n            authEndpoint += \"?\";\r\n        } else {\r\n            authEndpoint += \"&\";\r\n        }\r\n\r\n        const requestUrl: string = `${authEndpoint}${str.join(\"&\")}`;\r\n        return requestUrl;\r\n    }\r\n\r\n    /**\r\n     * Generate the array of all QueryStringParams to be sent to the server\r\n     * @param scopes\r\n     */\r\n    static createNavigationUrlString(serverRequestParams: ServerRequestParameters): Array<string> {\r\n        const scopes = serverRequestParams.scopes;\r\n\r\n        if (scopes.indexOf(serverRequestParams.clientId) === -1) {\r\n            scopes.push(serverRequestParams.clientId);\r\n        }\r\n        const str: Array<string> = [];\r\n        str.push(\"response_type=\" + serverRequestParams.responseType);\r\n\r\n        this.translateclientIdUsedInScope(scopes, serverRequestParams.clientId);\r\n        str.push(\"scope=\" + encodeURIComponent(ScopeSet.parseScope(scopes)));\r\n        str.push(\"client_id=\" + encodeURIComponent(serverRequestParams.clientId));\r\n        str.push(\"redirect_uri=\" + encodeURIComponent(serverRequestParams.redirectUri));\r\n\r\n        str.push(\"state=\" + encodeURIComponent(serverRequestParams.state));\r\n        str.push(\"nonce=\" + encodeURIComponent(serverRequestParams.nonce));\r\n\r\n        str.push(\"client_info=1\");\r\n        str.push(`x-client-SKU=${serverRequestParams.xClientSku}`);\r\n        str.push(`x-client-Ver=${serverRequestParams.xClientVer}`);\r\n        if (serverRequestParams.promptValue) {\r\n            str.push(\"prompt=\" + encodeURIComponent(serverRequestParams.promptValue));\r\n        }\r\n\r\n        if (serverRequestParams.claimsValue) {\r\n            str.push(\"claims=\" + encodeURIComponent(serverRequestParams.claimsValue));\r\n        }\r\n\r\n        if (serverRequestParams.queryParameters) {\r\n            str.push(serverRequestParams.queryParameters);\r\n        }\r\n\r\n        if (serverRequestParams.extraQueryParameters) {\r\n            str.push(serverRequestParams.extraQueryParameters);\r\n        }\r\n\r\n        str.push(\"client-request-id=\" + encodeURIComponent(serverRequestParams.correlationId));\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * append the required scopes: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes\r\n     * @param scopes\r\n     */\r\n    private static translateclientIdUsedInScope(scopes: Array<string>, clientId: string): void {\r\n        const clientIdIndex: number = scopes.indexOf(clientId);\r\n        if (clientIdIndex >= 0) {\r\n            scopes.splice(clientIdIndex, 1);\r\n            if (scopes.indexOf(\"openid\") === -1) {\r\n                scopes.push(\"openid\");\r\n            }\r\n            if (scopes.indexOf(\"profile\") === -1) {\r\n                scopes.push(\"profile\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    static getCurrentUrl(): string {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Returns given URL with query string removed\r\n     */\r\n    static removeHashFromUrl(url: string): string {\r\n        return url.split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    static replaceTenantPath(url: string, tenantId: string): string {\r\n        url = url.toLowerCase();\r\n        const urlObject = this.GetUrlComponents(url);\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && pathArray[0] === Constants.common)) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return this.constructAuthorityUriFromObject(urlObject, pathArray);\r\n    }\r\n\r\n    static constructAuthorityUriFromObject(urlObject: IUri, pathArray: string[]) {\r\n        return this.CanonicalizeUri(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + pathArray.join(\"/\"));\r\n    }\r\n\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    static GetUrlComponents(url: string): IUri {\r\n        if (!url) {\r\n            throw \"Url required\";\r\n        }\r\n\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n\r\n        const match = url.match(regEx);\r\n\r\n        if (!match || match.length < 6) {\r\n            throw \"Valid url required\";\r\n        }\r\n\r\n        const urlComponents = <IUri>{\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5]\r\n        };\r\n\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n\r\n        if (match[6]){\r\n            urlComponents.Search = match[6];\r\n        }\r\n        if (match[8]){\r\n            urlComponents.Hash = match[8];\r\n        }\r\n        \r\n        return urlComponents;\r\n    }\r\n\r\n    /**\r\n     * Given a url or path, append a trailing slash if one doesnt exist\r\n     *\r\n     * @param url\r\n     */\r\n    static CanonicalizeUri(url: string): string {\r\n        if (url) {\r\n            url = url.toLowerCase();\r\n        }\r\n\r\n        if (url && !UrlUtils.endsWith(url, \"/\")) {\r\n            url += \"/\";\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the url ends with the suffix\r\n     * Required because we are compiling for es5 instead of es6\r\n     * @param url\r\n     * @param str\r\n     */\r\n    // TODO: Rename this, not clear what it is supposed to do\r\n    static endsWith(url: string, suffix: string): boolean {\r\n        if (!url || !suffix) {\r\n            return false;\r\n        }\r\n\r\n        return url.indexOf(suffix, url.length - suffix.length) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters\r\n     * @param url\r\n     * @param name\r\n     */\r\n    static urlRemoveQueryStringParameter(url: string, name: string): string {\r\n        if (StringUtils.isEmpty(url)) {\r\n            return url;\r\n        }\r\n\r\n        let regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    static getHashFromUrl(urlStringOrFragment: string): string {\r\n        const hashIndex1 = urlStringOrFragment.indexOf(\"#\");\r\n        const hashIndex2 = urlStringOrFragment.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex2 + 2);\r\n        } else if (hashIndex1 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex1 + 1);\r\n        }\r\n        return urlStringOrFragment;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Check if the url contains a hash with known properties\r\n     * @ignore\r\n     */\r\n    static urlContainsHash(urlString: string): boolean {\r\n        const parameters = UrlUtils.deserializeHash(urlString);\r\n        return (\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ERROR) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN) ||\r\n            parameters.hasOwnProperty(ServerHashParamKeys.ID_TOKEN)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Returns deserialized portion of URL hash\r\n     * @ignore\r\n     */\r\n    static deserializeHash(urlFragment: string) {\r\n        const hash = UrlUtils.getHashFromUrl(urlFragment);\r\n        return CryptoUtils.deserialize(hash);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {string} URI\r\n     * @returns {string} host from the URI\r\n     *\r\n     * extract URI from the host\r\n     */\r\n    static getHostFromUri(uri: string): string {\r\n        // remove http:// or https:// from uri\r\n        let extractedUri = String(uri).replace(/^(https?:)\\/\\//, \"\");\r\n        extractedUri = extractedUri.split(\"/\")[0];\r\n        return extractedUri;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"./AuthError\";\r\nimport { IdToken } from \"../IdToken\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\n\r\nexport const ClientAuthErrorMessage = {\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements like authority.\"\r\n    },\r\n    multipleCacheAuthorities: {\r\n        code: \"multiple_authorities\",\r\n        desc: \"Multiple authorities found in the cache. Pass authority in the API overload.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    popUpWindowError: {\r\n        code: \"popup_window_error\",\r\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\r\n    },\r\n    tokenRenewalError: {\r\n        code: \"token_renewal_error\",\r\n        desc: \"Token renewal operation failed due to timeout.\"\r\n    },\r\n    invalidIdToken: {\r\n        code: \"invalid_id_token\",\r\n        desc: \"Invalid ID token format.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state_error\",\r\n        desc: \"Invalid state.\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch_error\",\r\n        desc: \"Nonce is not matching, Nonce received: \"\r\n    },\r\n    loginProgressError: {\r\n        code: \"login_progress_error\",\r\n        desc: \"Login_In_Progress: Error during login call - login is already in progress.\"\r\n    },\r\n    acquireTokenProgressError: {\r\n        code: \"acquiretoken_progress_error\",\r\n        desc: \"AcquireToken_In_Progress: Error during login call - login is already in progress.\"\r\n    },\r\n    userCancelledError: {\r\n        code: \"user_cancelled\",\r\n        desc: \"User cancelled the flow.\"\r\n    },\r\n    callbackError: {\r\n        code: \"callback_error\",\r\n        desc: \"Error occurred in token received callback function.\"\r\n    },\r\n    userLoginRequiredError: {\r\n        code: \"user_login_error\",\r\n        desc: \"User login is required. For silent calls, request must contain either sid or login_hint\"\r\n    },\r\n    userDoesNotExistError: {\r\n        code: \"user_non_existent\",\r\n        desc: \"User object does not exist. Please call a login API.\"\r\n    },\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoNotPopulatedError: {\r\n        code: \"client_info_not_populated_error\",\r\n        desc: \"The service did not populate client_info in the response, Please verify with the service team\"\r\n    },\r\n    nullOrEmptyIdToken: {\r\n        code: \"null_or_empty_id_token\",\r\n        desc: \"The idToken is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    idTokenNotParsed: {\r\n        code: \"id_token_parsing_error\",\r\n        desc: \"ID token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    tokenEncodingError: {\r\n        code: \"token_encoding_error\",\r\n        desc: \"The token to be decoded is not encoded correctly.\"\r\n    },\r\n    invalidInteractionType: {\r\n        code: \"invalid_interaction_type\",\r\n        desc: \"The interaction type passed to the handler was incorrect or unknown\"\r\n    },\r\n    cacheParseError: {\r\n        code: \"cannot_parse_cache\",\r\n        desc: \"The cached token key is not a valid JSON and cannot be parsed\"\r\n    },\r\n    blockTokenRequestsInHiddenIframe: {\r\n        code: \"block_token_requests\",\r\n        desc: \"Token calls are blocked in hidden iframes\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nexport class ClientAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ClientAuthError\";\r\n\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n\r\n    static createEndpointResolutionError(errDetail?: string): ClientAuthError {\r\n        let errorMessage = ClientAuthErrorMessage.endpointResolutionError.desc;\r\n        if (errDetail && !StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += ` Details: ${errDetail}`;\r\n        }\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, errorMessage);\r\n    }\r\n\r\n    static createMultipleMatchingTokensInCacheError(scope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\r\n            `Cache error for scope ${scope}: ${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\r\n    }\r\n\r\n    static createMultipleAuthoritiesInCacheError(scope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleCacheAuthorities.code,\r\n            `Cache error for scope ${scope}: ${ClientAuthErrorMessage.multipleCacheAuthorities.desc}.`);\r\n    }\r\n\r\n    static createPopupWindowError(errDetail?: string): ClientAuthError {\r\n        let errorMessage = ClientAuthErrorMessage.popUpWindowError.desc;\r\n        if (errDetail && !StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += ` Details: ${errDetail}`;\r\n        }\r\n        return new ClientAuthError(ClientAuthErrorMessage.popUpWindowError.code, errorMessage);\r\n    }\r\n\r\n    static createTokenRenewalTimeoutError(urlNavigate: string): ClientAuthError {\r\n        const errorMessage = `URL navigated to is ${urlNavigate}, ${ClientAuthErrorMessage.tokenRenewalError.desc}`;\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRenewalError.code,\r\n            errorMessage);\r\n    }\r\n\r\n    static createInvalidIdTokenError(idToken: IdToken) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidIdToken.code,\r\n            `${ClientAuthErrorMessage.invalidIdToken.desc} Given token: ${idToken}`);\r\n    }\r\n\r\n    // TODO: Is this not a security flaw to send the user the state expected??\r\n    static createInvalidStateError(invalidState: string, actualState: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\r\n            `${ClientAuthErrorMessage.invalidStateError.desc} ${invalidState}, state expected : ${actualState}.`);\r\n    }\r\n\r\n    // TODO: Is this not a security flaw to send the user the Nonce expected??\r\n    static createNonceMismatchError(invalidNonce: string, actualNonce: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\r\n            `${ClientAuthErrorMessage.nonceMismatchError.desc} ${invalidNonce}, nonce expected : ${actualNonce}.`);\r\n    }\r\n\r\n    static createLoginInProgressError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.loginProgressError.code,\r\n            ClientAuthErrorMessage.loginProgressError.desc);\r\n    }\r\n\r\n    static createAcquireTokenInProgressError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.acquireTokenProgressError.code,\r\n            ClientAuthErrorMessage.acquireTokenProgressError.desc);\r\n    }\r\n\r\n    static createUserCancelledError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userCancelledError.code,\r\n            ClientAuthErrorMessage.userCancelledError.desc);\r\n    }\r\n\r\n    static createErrorInCallbackFunction(errorDesc: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.callbackError.code,\r\n            `${ClientAuthErrorMessage.callbackError.desc} ${errorDesc}.`);\r\n    }\r\n\r\n    static createUserLoginRequiredError() : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userLoginRequiredError.code,\r\n            ClientAuthErrorMessage.userLoginRequiredError.desc);\r\n    }\r\n\r\n    static createUserDoesNotExistError() : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userDoesNotExistError.code,\r\n            ClientAuthErrorMessage.userDoesNotExistError.desc);\r\n    }\r\n\r\n    static createClientInfoDecodingError(caughtError: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\r\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\r\n    }\r\n\r\n    static createClientInfoNotPopulatedError(caughtError: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoNotPopulatedError.code,\r\n            `${ClientAuthErrorMessage.clientInfoNotPopulatedError.desc} Failed with error: ${caughtError}`);\r\n    }\r\n\r\n    static createIdTokenNullOrEmptyError(invalidRawTokenString: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyIdToken.code,\r\n            `${ClientAuthErrorMessage.nullOrEmptyIdToken.desc} Raw ID Token Value: ${invalidRawTokenString}`);\r\n    }\r\n\r\n    static createIdTokenParsingError(caughtParsingError: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.idTokenNotParsed.code,\r\n            `${ClientAuthErrorMessage.idTokenNotParsed.desc} Failed with error: ${caughtParsingError}`);\r\n    }\r\n\r\n    static createTokenEncodingError(incorrectlyEncodedToken: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenEncodingError.code,\r\n            `${ClientAuthErrorMessage.tokenEncodingError.desc} Attempted to decode: ${incorrectlyEncodedToken}`);\r\n    }\r\n\r\n    static createInvalidInteractionTypeError() : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidInteractionType.code,\r\n            ClientAuthErrorMessage.invalidInteractionType.desc);\r\n    }\r\n\r\n    static createCacheParseError(key: string) : ClientAuthError {\r\n        const errorMessage = `invalid key: ${key}, ${ClientAuthErrorMessage.cacheParseError.desc}`;\r\n        return new ClientAuthError(ClientAuthErrorMessage.cacheParseError.code,\r\n            errorMessage);\r\n    }\r\n\r\n    static createBlockTokenRequestsInHiddenIframeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.blockTokenRequestsInHiddenIframe.code,\r\n            ClientAuthErrorMessage.blockTokenRequestsInHiddenIframe.desc);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: \"unexpected_error\",\r\n        desc: \"Unexpected error in authentication.\"\r\n    },\r\n    noWindowObjectError: {\r\n        code: \"no_window_object\",\r\n        desc: \"No window object available. Details:\"\r\n    }\r\n};\r\n\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nexport class AuthError extends Error {\r\n\r\n    errorCode: string;\r\n    errorMessage: string;\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorMessage);\r\n        Object.setPrototypeOf(this, AuthError.prototype);\r\n\r\n        this.errorCode = errorCode;\r\n        this.errorMessage = errorMessage;\r\n        this.name = \"AuthError\";\r\n    }\r\n\r\n    static createUnexpectedError(errDesc: string) {\r\n        return new AuthError(AuthErrorMessage.unexpectedError.code, `${AuthErrorMessage.unexpectedError.desc}: ${errDesc}`);\r\n    }\r\n\r\n    static createNoWindowObjectError(errDesc: string) {\r\n        return new AuthError(AuthErrorMessage.noWindowObjectError.code, `${AuthErrorMessage.noWindowObjectError.desc} ${errDesc}`);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IUri } from \"../IUri\";\r\nimport { ITenantDiscoveryResponse } from \"./ITenantDiscoveryResponse\";\r\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\r\nimport { XhrClient, XhrResponse } from \"../XHRClient\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\nimport TelemetryManager from \"../telemetry/TelemetryManager\";\r\nimport HttpEvent from \"../telemetry/HttpEvent\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport enum AuthorityType {\r\n    Aad,\r\n    Adfs,\r\n    B2C\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport abstract class Authority {\r\n    constructor(authority: string, validateAuthority: boolean) {\r\n        this.IsValidationEnabled = validateAuthority;\r\n        this.CanonicalAuthority = authority;\r\n\r\n        this.validateAsUri();\r\n    }\r\n\r\n    public abstract get AuthorityType(): AuthorityType;\r\n\r\n    public IsValidationEnabled: boolean;\r\n\r\n    public get Tenant(): string {\r\n        return this.CanonicalAuthorityUrlComponents.PathSegments[0];\r\n    }\r\n\r\n    private tenantDiscoveryResponse: ITenantDiscoveryResponse;\r\n\r\n    public get AuthorizationEndpoint(): string {\r\n        this.validateResolved();\r\n        return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n    }\r\n\r\n    public get EndSessionEndpoint(): string {\r\n        this.validateResolved();\r\n        return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n    }\r\n\r\n    public get SelfSignedJwtAudience(): string {\r\n        this.validateResolved();\r\n        return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);\r\n    }\r\n\r\n    private validateResolved() {\r\n        if (!this.tenantDiscoveryResponse) {\r\n            throw \"Please call ResolveEndpointsAsync first\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\r\n    public get CanonicalAuthority(): string {\r\n        return this.canonicalAuthority;\r\n    }\r\n\r\n    public set CanonicalAuthority(url: string) {\r\n        this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\r\n        this.canonicalAuthorityUrlComponents = null;\r\n    }\r\n\r\n    private canonicalAuthority: string;\r\n    private canonicalAuthorityUrlComponents: IUri;\r\n\r\n    public get CanonicalAuthorityUrlComponents(): IUri {\r\n        if (!this.canonicalAuthorityUrlComponents) {\r\n            this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\r\n        }\r\n\r\n        return this.canonicalAuthorityUrlComponents;\r\n    }\r\n\r\n    /**\r\n     * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n     */\r\n    protected get DefaultOpenIdConfigurationEndpoint(): string {\r\n        return `${this.CanonicalAuthority}v2.0/.well-known/openid-configuration`;\r\n    }\r\n\r\n    /**\r\n     * Given a string, validate that it is of the form https://domain/path\r\n     */\r\n    private validateAsUri() {\r\n        let components;\r\n        try {\r\n            components = this.CanonicalAuthorityUrlComponents;\r\n        } catch (e) {\r\n            throw ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationErrorMessage.authorityUriInsecure;\r\n        }\r\n\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls the OIDC endpoint and returns the response\r\n     */\r\n    private DiscoverEndpoints(openIdConfigurationEndpoint: string, telemetryManager?: TelemetryManager, correlationId?: string): Promise<ITenantDiscoveryResponse> {\r\n        const client = new XhrClient();\r\n\r\n        const httpMethod = \"GET\";\r\n        const httpEvent = new HttpEvent(correlationId);\r\n        httpEvent.url = openIdConfigurationEndpoint;\r\n        httpEvent.httpMethod = httpMethod;\r\n        telemetryManager.startEvent(httpEvent);\r\n\r\n        return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod, /* enableCaching: */ true)\r\n            .then((response: XhrResponse) => {\r\n                httpEvent.httpResponseStatus = response.statusCode;\r\n                telemetryManager.stopEvent(httpEvent);\r\n                return <ITenantDiscoveryResponse>{\r\n                    AuthorizationEndpoint: response.body.authorization_endpoint,\r\n                    EndSessionEndpoint: response.body.end_session_endpoint,\r\n                    Issuer: response.body.issuer\r\n                };\r\n            })\r\n            .catch(err => {\r\n                httpEvent.serverErrorCode = err;\r\n                telemetryManager.stopEvent(httpEvent);\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns a promise.\r\n     * Checks to see if the authority is in the cache\r\n     * Discover endpoints via openid-configuration\r\n     * If successful, caches the endpoint for later use in OIDC\r\n     */\r\n    public async resolveEndpointsAsync(telemetryManager?: TelemetryManager, correlationId?: string): Promise<Authority> {\r\n        const openIdConfigurationEndpointResponse = await this.GetOpenIdConfigurationEndpointAsync(telemetryManager, correlationId);\r\n        this.tenantDiscoveryResponse = await this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    public abstract GetOpenIdConfigurationEndpointAsync(telemetryManager?: TelemetryManager, correlationId?: string): Promise<string>;\r\n}\r\n","export const EVENT_NAME_PREFIX = \"msal.\";\r\nexport const EVENT_NAME_KEY = \"event_name\";\r\nexport const START_TIME_KEY = \"start_time\";\r\nexport const ELAPSED_TIME_KEY  = \"elapsed_time\";\r\n\r\nexport const TELEMETRY_BLOB_EVENT_NAMES =  {\r\n    MsalCorrelationIdConstStrKey: \"Microsoft.MSAL.correlation_id\",\r\n    ApiTelemIdConstStrKey: \"msal.api_telem_id\",\r\n    ApiIdConstStrKey: \"msal.api_id\",\r\n    BrokerAppConstStrKey: \"Microsoft_MSAL_broker_app\",\r\n    CacheEventCountConstStrKey: \"Microsoft_MSAL_cache_event_count\",\r\n    HttpEventCountTelemetryBatchKey: \"Microsoft_MSAL_http_event_count\",\r\n    IdpConstStrKey: \"Microsoft_MSAL_idp\",\r\n    IsSilentTelemetryBatchKey: \"\",\r\n    IsSuccessfulConstStrKey: \"Microsoft_MSAL_is_successful\",\r\n    ResponseTimeConstStrKey: \"Microsoft_MSAL_response_time\",\r\n    TenantIdConstStrKey: \"Microsoft_MSAL_tenant_id\",\r\n    UiEventCountTelemetryBatchKey: \"Microsoft_MSAL_ui_event_count\"\r\n};\r\n\r\n// This is used to replace the real tenant in telemetry info\r\nexport const TENANT_PLACEHOLDER = \"<tenant>\";\r\n\r\n","import { B2cAuthority } from \"../authority/B2cAuthority\";\r\nimport { AADTrustedHostList } from \"../utils/Constants\";\r\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\n\r\nexport const scrubTenantFromUri = (uri: string): String => {\r\n\r\n    const url = UrlUtils.GetUrlComponents(uri);\r\n\r\n    // validate trusted host\r\n    if (!AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\r\n        /**\r\n         * returning what was passed because the library needs to work with uris that are non\r\n         * AAD trusted but passed by users such as B2C or others.\r\n         * HTTP Events for instance can take a url to the open id config endpoint\r\n         */\r\n        return uri;\r\n    }\r\n\r\n    const pathParams = url.PathSegments;\r\n\r\n    if (pathParams && pathParams.length >= 2) {\r\n        const tenantPosition = pathParams[1] ===  \"tfp\" ? 2 : 1;\r\n        if (tenantPosition < pathParams.length) {\r\n            pathParams[tenantPosition] = TENANT_PLACEHOLDER;\r\n        }\r\n    }\r\n\r\n    return  `${url.Protocol}//${url.HostNameAndPort}/${pathParams.join(\"/\")}`;\r\n};\r\n\r\nexport const hashPersonalIdentifier = (valueToHash: string) => {\r\n    /*\r\n     * TODO sha256 this\r\n     * Current test runner is being funny with node libs that are webpacked anyway\r\n     * need a different solution\r\n     */\r\n    return CryptoUtils.base64Encode(valueToHash);\r\n};\r\n\r\nexport const prependEventNamePrefix = (suffix: string): string => `${EVENT_NAME_PREFIX}${suffix || \"\"}`;\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\r\nimport { Constants } from \"./utils/Constants\";\r\n\r\nexport class ScopeSet {\r\n\r\n    /**\r\n     * Check if there are dup scopes in a given request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\r\n    static isIntersectingScopes(cachedScopes: Array<string>, scopes: Array<string>): boolean {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        for (let i = 0; i < scopes.length; i++) {\r\n            if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check if a given scope is present in the request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    static containsScope(cachedScopes: Array<string>, scopes: Array<string>): boolean {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        return scopes.every((value: any): boolean => cachedScopes.indexOf(value.toString().toLowerCase()) >= 0);\r\n    }\r\n\r\n    /**\r\n     * toLower\r\n     *\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    static convertToLowerCase(scopes: Array<string>): Array<string> {\r\n        return scopes.map(scope => scope.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * remove one element from a scope array\r\n     *\r\n     * @param scopes\r\n     * @param scope\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    static removeElement(scopes: Array<string>, scope: string): Array<string> {\r\n        return scopes.filter(value => value !== scope);\r\n    }\r\n\r\n    /**\r\n     * Parse the scopes into a formatted scopeList\r\n     * @param scopes\r\n     */\r\n    static parseScope(scopes: Array<string>): string {\r\n        let scopeList: string = \"\";\r\n        if (scopes) {\r\n            for (let i: number = 0; i < scopes.length; ++i) {\r\n                scopeList += (i !== scopes.length - 1) ? scopes[i] + \" \" : scopes[i];\r\n            }\r\n        }\r\n\r\n        return scopeList;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     * @ignore\r\n     */\r\n    static validateInputScope(scopes: Array<string>, scopesRequired: boolean, clientId: string): void {\r\n        if (!scopes) {\r\n            if (scopesRequired) {\r\n                throw ClientConfigurationError.createScopesRequiredError(scopes);\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Check that scopes is an array object (also throws error if scopes == null)\r\n        if (!Array.isArray(scopes)) {\r\n            throw ClientConfigurationError.createScopesNonArrayError(scopes);\r\n        }\r\n\r\n        // Check that scopes is not an empty array\r\n        if (scopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\r\n        }\r\n\r\n        // Check that clientId is passed as single scope\r\n        if (scopes.indexOf(clientId) > -1) {\r\n            if (scopes.length > 1) {\r\n                throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts scope value from the state sent with the authentication request.\r\n     * @param {string} state\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    static getScopeFromState(state: string): string {\r\n        if (state) {\r\n            const splitIndex = state.indexOf(Constants.resourceDelimiter);\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Appends extraScopesToConsent if passed\r\n     * @param {@link AuthenticationParameters}\r\n     */\r\n    static appendScopes(reqScopes: Array<string>, reqExtraScopesToConsent: Array<string>): Array<string> {\r\n        if(reqScopes) {\r\n            return reqExtraScopesToConsent ? [...reqScopes, ...reqExtraScopesToConsent]: reqScopes;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // #endregion\r\n\r\n}\r\n","import { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\r\nimport {\r\n    EVENT_NAME_KEY,\r\n    START_TIME_KEY,\r\n    ELAPSED_TIME_KEY\r\n} from \"./TelemetryConstants\";\r\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\n\r\nexport default class TelemetryEvent {\r\n\r\n    private startTimestamp: number;\r\n    protected event: any; // TODO TYPE THIS\r\n    public eventId: string;\r\n\r\n    constructor(eventName: string, correlationId: string) {\r\n\r\n        this.startTimestamp = Date.now();\r\n        this.eventId = CryptoUtils.createNewGuid();\r\n        this.event = {\r\n            [prependEventNamePrefix(EVENT_NAME_KEY)]: eventName,\r\n            [prependEventNamePrefix(START_TIME_KEY)]: this.startTimestamp,\r\n            [prependEventNamePrefix(ELAPSED_TIME_KEY)]: -1,\r\n            [`${TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey}`]: correlationId\r\n        };\r\n    }\r\n\r\n    private setElapsedTime(time: Number): void {\r\n        this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\r\n    }\r\n\r\n    public stop(): void {\r\n        // Set duration of event\r\n        this.setElapsedTime(+Date.now() - +this.startTimestamp);\r\n    }\r\n\r\n    public get telemetryCorrelationId(): string {\r\n        return this.event[`${TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey}`];\r\n    }\r\n\r\n    public set telemetryCorrelationId(value: string) {\r\n        this.event[`${TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey}`] = value;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\r\n    }\r\n\r\n    public get(): object {\r\n        return {\r\n            ...this.event,\r\n            eventId: this.eventId\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\nimport { libraryVersion } from \"./utils/Constants\";\r\n\r\nexport interface ILoggerCallback {\r\n    (level: LogLevel, message: string, containsPii: boolean): void;\r\n}\r\n\r\nexport enum LogLevel {\r\n    Error,\r\n    Warning,\r\n    Info,\r\n    Verbose\r\n}\r\n\r\nexport class Logger {// Singleton Class\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    // TODO: This does not seem to be a singleton!! Change or Delete.\r\n    private static instance: Logger;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    private correlationId: string;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    private level: LogLevel = LogLevel.Info;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    private piiLoggingEnabled: boolean;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    private localCallback: ILoggerCallback;\r\n\r\n    constructor(localCallback: ILoggerCallback,\r\n        options:\r\n        {\r\n            correlationId?: string,\r\n            level?: LogLevel,\r\n            piiLoggingEnabled?: boolean,\r\n        } = {}) {\r\n        const {\r\n            correlationId = \"\",\r\n            level = LogLevel.Info,\r\n            piiLoggingEnabled = false\r\n        } = options;\r\n\r\n        this.localCallback = localCallback;\r\n        this.correlationId = correlationId;\r\n        this.level = level;\r\n        this.piiLoggingEnabled = piiLoggingEnabled;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    private logMessage(logLevel: LogLevel, logMessage: string, containsPii: boolean): void {\r\n        if ((logLevel > this.level) || (!this.piiLoggingEnabled && containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n        let log: string;\r\n        if (!StringUtils.isEmpty(this.correlationId)) {\r\n            log = timestamp + \":\" + this.correlationId + \"-\" + libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\r\n        }\r\n        else {\r\n            log = timestamp + \":\" + libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\r\n        }\r\n        this.executeCallback(logLevel, log, containsPii);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    executeCallback(level: LogLevel, message: string, containsPii: boolean) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    error(message: string): void {\r\n        this.logMessage(LogLevel.Error, message, false);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    errorPii(message: string): void {\r\n        this.logMessage(LogLevel.Error, message, true);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    warning(message: string): void {\r\n        this.logMessage(LogLevel.Warning, message, false);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    warningPii(message: string): void {\r\n        this.logMessage(LogLevel.Warning, message, true);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    info(message: string): void {\r\n        this.logMessage(LogLevel.Info, message, false);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    infoPii(message: string): void {\r\n        this.logMessage(LogLevel.Info, message, true);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    verbose(message: string): void {\r\n        this.logMessage(LogLevel.Verbose, message, false);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    verbosePii(message: string): void {\r\n        this.logMessage(LogLevel.Verbose, message, true);\r\n    }\r\n\r\n    isPiiLoggingEnabled(): boolean {\r\n        return this.piiLoggingEnabled;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"./AuthError\";\r\n\r\nexport const ServerErrorMessage = {\r\n    serverUnavailable: {\r\n        code: \"server_unavailable\",\r\n        desc: \"Server is temporarily unavailable.\"\r\n    },\r\n    unknownServerError: {\r\n        code: \"unknown_server_error\"\r\n    },\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nexport class ServerError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ServerError\";\r\n\r\n        Object.setPrototypeOf(this, ServerError.prototype);\r\n    }\r\n\r\n    static createServerUnavailableError(): ServerError {\r\n        return new ServerError(ServerErrorMessage.serverUnavailable.code,\r\n            ServerErrorMessage.serverUnavailable.desc);\r\n    }\r\n\r\n    static createUnknownServerError(errorDesc: string): ServerError {\r\n        return new ServerError(ServerErrorMessage.unknownServerError.code,\r\n            errorDesc);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenCacheItem } from \"./cache/AccessTokenCacheItem\";\r\nimport { AccessTokenKey } from \"./cache/AccessTokenKey\";\r\nimport { AccessTokenValue } from \"./cache/AccessTokenValue\";\r\nimport { ServerRequestParameters } from \"./ServerRequestParameters\";\r\nimport { Authority } from \"./authority/Authority\";\r\nimport { ClientInfo } from \"./ClientInfo\";\r\nimport { IdToken } from \"./IdToken\";\r\nimport { Logger } from \"./Logger\";\r\nimport { AuthCache } from \"./cache/AuthCache\";\r\nimport { Account } from \"./Account\";\r\nimport { ScopeSet } from \"./ScopeSet\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\nimport { WindowUtils } from \"./utils/WindowUtils\";\r\nimport { TokenUtils } from \"./utils/TokenUtils\";\r\nimport { TimeUtils } from \"./utils/TimeUtils\";\r\nimport { UrlUtils } from \"./utils/UrlUtils\";\r\nimport { RequestUtils } from \"./utils/RequestUtils\";\r\nimport { ResponseUtils } from \"./utils/ResponseUtils\";\r\nimport { AuthorityFactory } from \"./authority/AuthorityFactory\";\r\nimport { Configuration, buildConfiguration, TelemetryOptions } from \"./Configuration\";\r\nimport { AuthenticationParameters } from \"./AuthenticationParameters\";\r\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\r\nimport { AuthError } from \"./error/AuthError\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"./error/ClientAuthError\";\r\nimport { ServerError } from \"./error/ServerError\";\r\nimport { InteractionRequiredAuthError } from \"./error/InteractionRequiredAuthError\";\r\nimport { AuthResponse, buildResponseStateOnly } from \"./AuthResponse\";\r\nimport TelemetryManager from \"./telemetry/TelemetryManager\";\r\nimport { TelemetryPlatform, TelemetryConfig } from \"./telemetry/TelemetryTypes\";\r\nimport ApiEvent, { API_CODE, API_EVENT_IDENTIFIER } from \"./telemetry/ApiEvent\";\r\n\r\nimport { Constants,\r\n    ServerHashParamKeys,\r\n    InteractionType,\r\n    libraryVersion,\r\n    TemporaryCacheKeys,\r\n    PersistentCacheKeys,\r\n    ErrorCacheKeys,\r\n    FramePrefix\r\n} from \"./utils/Constants\";\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\n\r\n// default authority\r\nconst DEFAULT_AUTHORITY = \"https://login.microsoftonline.com/common\";\r\n\r\n/**\r\n * Interface to handle iFrame generation, Popup Window creation and redirect handling\r\n */\r\ndeclare global {\r\n    interface Window {\r\n        msal: Object;\r\n        CustomEvent: CustomEvent;\r\n        Event: Event;\r\n        activeRenewals: {};\r\n        renewStates: Array<string>;\r\n        callbackMappedToRenewStates : {};\r\n        promiseMappedToRenewStates: {};\r\n        openedWindows: Array<Window>;\r\n        requestType: string;\r\n    }\r\n}\r\n\r\n/**\r\n * @hidden\r\n * @ignore\r\n * response_type from OpenIDConnect\r\n * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1\r\n * Since we support only implicit flow in this library, we restrict the response_type support to only 'token' and 'id_token'\r\n *\r\n */\r\nconst ResponseTypes = {\r\n    id_token: \"id_token\",\r\n    token: \"token\",\r\n    id_token_token: \"id_token token\"\r\n};\r\n\r\n/**\r\n * @hidden\r\n * @ignore\r\n */\r\nexport interface CacheResult {\r\n    errorDesc: string;\r\n    token: string;\r\n    error: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * @ignore\r\n * Data type to hold information about state returned from the server\r\n */\r\nexport type ResponseStateInfo = {\r\n    state: string;\r\n    timestamp: number,\r\n    method: string;\r\n    stateMatch: boolean;\r\n    requestType: string;\r\n};\r\n\r\n/**\r\n * A type alias for an authResponseCallback function.\r\n * {@link (authResponseCallback:type)}\r\n * @param authErr error created for failure cases\r\n * @param response response containing token strings in success cases, or just state value in error cases\r\n */\r\nexport type authResponseCallback = (authErr: AuthError, response?: AuthResponse) => void;\r\n\r\n/**\r\n * A type alias for a tokenReceivedCallback function.\r\n * {@link (tokenReceivedCallback:type)}\r\n * @returns response of type {@link (AuthResponse:type)}\r\n * The function that will get the call back once this API is completed (either successfully or with a failure).\r\n */\r\nexport type tokenReceivedCallback = (response: AuthResponse) => void;\r\n\r\n/**\r\n * A type alias for a errorReceivedCallback function.\r\n * {@link (errorReceivedCallback:type)}\r\n * @returns response of type {@link (AuthError:class)}\r\n * @returns {string} account state\r\n */\r\nexport type errorReceivedCallback = (authErr: AuthError, accountState: string) => void;\r\n\r\n/**\r\n * UserAgentApplication class\r\n *\r\n * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions\r\n */\r\nexport class UserAgentApplication {\r\n\r\n    // input Configuration by the developer/user\r\n    private config: Configuration;\r\n\r\n    // callbacks for token/error\r\n    private authResponseCallback: authResponseCallback = null;\r\n    private tokenReceivedCallback: tokenReceivedCallback = null;\r\n    private errorReceivedCallback: errorReceivedCallback = null;\r\n\r\n    // Added for readability as these params are very frequently used\r\n    private logger: Logger;\r\n    private clientId: string;\r\n    private inCookie: boolean;\r\n    private telemetryManager: TelemetryManager;\r\n\r\n    // Cache and Account info referred across token grant flow\r\n    protected cacheStorage: AuthCache;\r\n    private account: Account;\r\n\r\n    // state variables\r\n    private silentAuthenticationState: string;\r\n    private silentLogin: boolean;\r\n    private redirectResponse: AuthResponse;\r\n    private redirectError: AuthError;\r\n\r\n    // Authority Functionality\r\n    protected authorityInstance: Authority;\r\n\r\n    /**\r\n     * setter for the authority URL\r\n     * @param {string} authority\r\n     */\r\n    // If the developer passes an authority, create an instance\r\n    public set authority(val) {\r\n        this.authorityInstance = AuthorityFactory.CreateInstance(val, this.config.auth.validateAuthority);\r\n    }\r\n\r\n    /**\r\n     * Method to manage the authority URL.\r\n     *\r\n     * @returns {string} authority\r\n     */\r\n    public get authority(): string {\r\n        return this.authorityInstance.CanonicalAuthority;\r\n    }\r\n\r\n    /**\r\n     * Get the current authority instance from the MSAL configuration object\r\n     *\r\n     * @returns {@link Authority} authority instance\r\n     */\r\n    public getAuthorityInstance(): Authority {\r\n        return this.authorityInstance;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application.\r\n     * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     *\r\n     * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/\r\n     *\r\n     * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n\r\n        // Set the Configuration\r\n        this.config = buildConfiguration(configuration);\r\n\r\n        this.logger = this.config.system.logger;\r\n        this.clientId = this.config.auth.clientId;\r\n        this.inCookie = this.config.cache.storeAuthStateInCookie;\r\n\r\n        this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId);\r\n\r\n        AuthorityFactory.setKnownAuthorities(this.config.auth.validateAuthority, this.config.auth.knownAuthorities);\r\n\r\n        // if no authority is passed, set the default: \"https://login.microsoftonline.com/common\"\r\n        this.authority = this.config.auth.authority || DEFAULT_AUTHORITY;\r\n\r\n        // cache keys msal - typescript throws an error if any value other than \"localStorage\" or \"sessionStorage\" is passed\r\n        this.cacheStorage = new AuthCache(this.clientId, this.config.cache.cacheLocation, this.inCookie);\r\n\r\n        // Initialize window handling code\r\n        window.activeRenewals = {};\r\n        window.renewStates = [];\r\n        window.callbackMappedToRenewStates = { };\r\n        window.promiseMappedToRenewStates = { };\r\n        window.msal = this;\r\n\r\n        const urlHash = window.location.hash;\r\n        const urlContainsHash = UrlUtils.urlContainsHash(urlHash);\r\n\r\n        // check if back button is pressed\r\n        WindowUtils.checkIfBackButtonIsPressed(this.cacheStorage);\r\n\r\n        // On the server 302 - Redirect, handle this\r\n        if (urlContainsHash) {\r\n            const stateInfo = this.getResponseState(urlHash);\r\n            if (stateInfo.method === Constants.interactionTypeRedirect) {\r\n                this.handleRedirectAuthenticationResponse(urlHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    // #region Redirect Callbacks\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Set the callback functions for the redirect flow to send back the success or error object.\r\n     * @param {@link (tokenReceivedCallback:type)} successCallback - Callback which contains the AuthResponse object, containing data from the server.\r\n     * @param {@link (errorReceivedCallback:type)} errorCallback - Callback which contains a AuthError object, containing error data from either the server\r\n     * or the library, depending on the origin of the error.\r\n     */\r\n    handleRedirectCallback(tokenReceivedCallback: tokenReceivedCallback, errorReceivedCallback: errorReceivedCallback): void;\r\n    handleRedirectCallback(authCallback: authResponseCallback): void;\r\n    handleRedirectCallback(authOrTokenCallback: authResponseCallback | tokenReceivedCallback, errorReceivedCallback?: errorReceivedCallback): void {\r\n        if (!authOrTokenCallback) {\r\n            throw ClientConfigurationError.createInvalidCallbackObjectError(authOrTokenCallback);\r\n        }\r\n\r\n        // Set callbacks\r\n        if (errorReceivedCallback) {\r\n            this.tokenReceivedCallback = authOrTokenCallback as tokenReceivedCallback;\r\n            this.errorReceivedCallback = errorReceivedCallback;\r\n            this.logger.warning(\"This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).\");\r\n        } else {\r\n            this.authResponseCallback = authOrTokenCallback as authResponseCallback;\r\n        }\r\n\r\n        if (this.redirectError) {\r\n            this.authErrorHandler(Constants.interactionTypeRedirect, this.redirectError, this.redirectResponse);\r\n        } else if (this.redirectResponse) {\r\n            this.authResponseHandler(Constants.interactionTypeRedirect, this.redirectResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Public API to verify if the URL contains the hash with known properties\r\n     * @param hash\r\n     */\r\n    public urlContainsHash(hash: string) {\r\n        return UrlUtils.urlContainsHash(hash);\r\n    }\r\n\r\n    private authResponseHandler(interactionType: InteractionType, response: AuthResponse, resolve?: any) : void {\r\n        if (interactionType === Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.tokenReceivedCallback(response);\r\n            } else if (this.authResponseCallback) {\r\n                this.authResponseCallback(null, response);\r\n            }\r\n        } else if (interactionType === Constants.interactionTypePopup) {\r\n            resolve(response);\r\n        } else {\r\n            throw ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    }\r\n\r\n    private authErrorHandler(interactionType: InteractionType, authErr: AuthError, response: AuthResponse, reject?: any) : void {\r\n        // set interaction_status to complete\r\n        this.cacheStorage.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n        if (interactionType === Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.errorReceivedCallback(authErr, response.accountState);\r\n            } else {\r\n                this.authResponseCallback(authErr, response);\r\n            }\r\n        } else if (interactionType === Constants.interactionTypePopup) {\r\n            reject(authErr);\r\n        } else {\r\n            throw ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     */\r\n    loginRedirect(userRequest?: AuthenticationParameters): void {\r\n        // validate request\r\n        const request: AuthenticationParameters = RequestUtils.validateRequest(userRequest, true, this.clientId, Constants.interactionTypeRedirect);\r\n        this.acquireTokenInteractive(Constants.interactionTypeRedirect, true, request,  null, null);\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    acquireTokenRedirect(userRequest: AuthenticationParameters): void {\r\n        // validate request\r\n        const request: AuthenticationParameters = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants.interactionTypeRedirect);\r\n        this.acquireTokenInteractive(Constants.interactionTypeRedirect, false, request, null, null);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    loginPopup(userRequest?: AuthenticationParameters): Promise<AuthResponse> {\r\n        // validate request\r\n        const request: AuthenticationParameters = RequestUtils.validateRequest(userRequest, true, this.clientId, Constants.interactionTypePopup);\r\n        const apiEvent: ApiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.LoginPopup, this.logger);\r\n\r\n        return new Promise<AuthResponse>((resolve, reject) => {\r\n            this.acquireTokenInteractive(Constants.interactionTypePopup, true, request, resolve, reject);\r\n        })\r\n            .then((resp) => {\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);\r\n                return resp;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.cacheStorage.resetTempCacheItems(request.state);\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    acquireTokenPopup(userRequest: AuthenticationParameters): Promise<AuthResponse> {\r\n        // validate request\r\n        const request: AuthenticationParameters = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants.interactionTypePopup);\r\n        const apiEvent: ApiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.AcquireTokenPopup, this.logger);\r\n\r\n        return new Promise<AuthResponse>((resolve, reject) => {\r\n            this.acquireTokenInteractive(Constants.interactionTypePopup, false, request, resolve, reject);\r\n        })\r\n            .then((resp) => {\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);\r\n                return resp;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.cacheStorage.resetTempCacheItems(request.state);\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // #region Acquire Token\r\n\r\n    /**\r\n     * Use when initiating the login process or when you want to obtain an access_token for your API,\r\n     * either by redirecting the user's browser window to the authorization endpoint or via opening a popup window in the user's browser.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    private acquireTokenInteractive(interactionType: InteractionType, isLoginCall: boolean, request: AuthenticationParameters, resolve?: any, reject?: any): void {\r\n\r\n        // block the request if made from the hidden iframe\r\n        WindowUtils.blockReloadInHiddenIframes();\r\n\r\n        const interactionProgress = this.cacheStorage.getItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n        if(interactionType === Constants.interactionTypeRedirect) {\r\n            this.cacheStorage.setItem(TemporaryCacheKeys.REDIRECT_REQUEST, `${Constants.inProgress}${Constants.resourceDelimiter}${request.state}`);\r\n        }\r\n\r\n        // If already in progress, do not proceed\r\n        if (interactionProgress === Constants.inProgress) {\r\n            const thrownError = isLoginCall ? ClientAuthError.createLoginInProgressError() : ClientAuthError.createAcquireTokenInProgressError();\r\n            const stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request.state));\r\n            this.cacheStorage.resetTempCacheItems(request.state);\r\n            this.authErrorHandler(interactionType,\r\n                thrownError,\r\n                stateOnlyResponse,\r\n                reject);\r\n            return;\r\n        }\r\n\r\n        // Get the account object if a session exists\r\n        const account: Account = (request && request.account && !isLoginCall) ? request.account : this.getAccount();\r\n\r\n        // If no session exists, prompt the user to login.\r\n        if (!account && !ServerRequestParameters.isSSOParam(request)) {\r\n            if (isLoginCall) {\r\n                // extract ADAL id_token if exists\r\n                const adalIdToken = this.extractADALIdToken();\r\n\r\n                // silent login if ADAL id_token is retrieved successfully - SSO\r\n                if (adalIdToken && !request.scopes) {\r\n                    this.logger.info(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\r\n                    const tokenRequest: AuthenticationParameters = this.buildIDTokenRequest(request);\r\n\r\n                    this.silentLogin = true;\r\n                    this.acquireTokenSilent(tokenRequest).then(response => {\r\n                        this.silentLogin = false;\r\n                        this.logger.info(\"Unified cache call is successful\");\r\n\r\n                        this.authResponseHandler(interactionType, response, resolve);\r\n                        return;\r\n                    }, (error) => {\r\n                        this.silentLogin = false;\r\n                        this.logger.error(\"Error occurred during unified cache ATS: \" + error);\r\n\r\n                        // proceed to login since ATS failed\r\n                        this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);\r\n                    });\r\n                }\r\n                // No ADAL token found, proceed to login\r\n                else {\r\n                    this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);\r\n                }\r\n            }\r\n            // AcquireToken call, but no account or context given, so throw error\r\n            else {\r\n                this.logger.info(\"User login is required\");\r\n                const stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request.state));\r\n                this.cacheStorage.resetTempCacheItems(request.state);\r\n                this.authErrorHandler(interactionType,\r\n                    ClientAuthError.createUserLoginRequiredError(),\r\n                    stateOnlyResponse,\r\n                    reject);\r\n                return;\r\n            }\r\n        }\r\n        // User session exists\r\n        else {\r\n            this.acquireTokenHelper(account, interactionType, isLoginCall, request, resolve, reject);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Helper function to acquireToken\r\n     *\r\n     */\r\n    private acquireTokenHelper(account: Account, interactionType: InteractionType, isLoginCall: boolean, request: AuthenticationParameters, resolve?: any, reject?: any): void {\r\n        // Track the acquireToken progress\r\n        this.cacheStorage.setItem(TemporaryCacheKeys.INTERACTION_STATUS, Constants.inProgress);\r\n        const scope = request.scopes ? request.scopes.join(\" \").toLowerCase() : this.clientId.toLowerCase();\r\n\r\n        let serverAuthenticationRequest: ServerRequestParameters;\r\n        const acquireTokenAuthority = (request && request.authority) ? AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;\r\n\r\n        let popUpWindow: Window;\r\n\r\n        if (interactionType === Constants.interactionTypePopup) {\r\n            // Generate a popup window\r\n            try {\r\n                popUpWindow = this.openPopup(\"about:blank\", \"msal\", Constants.popUpWidth, Constants.popUpHeight);\r\n\r\n                // Push popup window handle onto stack for tracking\r\n                WindowUtils.trackPopup(popUpWindow);\r\n            } catch (e) {\r\n                this.logger.info(ClientAuthErrorMessage.popUpWindowError.code + \":\" + ClientAuthErrorMessage.popUpWindowError.desc);\r\n                this.cacheStorage.setItem(ErrorCacheKeys.ERROR, ClientAuthErrorMessage.popUpWindowError.code);\r\n                this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, ClientAuthErrorMessage.popUpWindowError.desc);\r\n                if (reject) {\r\n                    reject(ClientAuthError.createPopupWindowError());\r\n                }\r\n            }\r\n\r\n            if (!popUpWindow) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        acquireTokenAuthority.resolveEndpointsAsync(this.telemetryManager, request.correlationId).then(async () => {\r\n            // On Fulfillment\r\n            const responseType: string = isLoginCall ? ResponseTypes.id_token : this.getTokenType(account, request.scopes, false);\r\n\r\n            const loginStartPage = request.redirectStartPage || window.location.href;\r\n\r\n            serverAuthenticationRequest = new ServerRequestParameters(\r\n                acquireTokenAuthority,\r\n                this.clientId,\r\n                responseType,\r\n                this.getRedirectUri(request && request.redirectUri),\r\n                request.scopes,\r\n                request.state,\r\n                request.correlationId\r\n            );\r\n\r\n            this.updateCacheEntries(serverAuthenticationRequest, account, isLoginCall, loginStartPage);\r\n\r\n            // populate QueryParameters (sid/login_hint) and any other extraQueryParameters set by the developer\r\n            serverAuthenticationRequest.populateQueryParams(account, request);\r\n\r\n            // Construct urlNavigate\r\n            const urlNavigate = UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants.response_mode_fragment;\r\n\r\n            // set state in cache\r\n            if (interactionType === Constants.interactionTypeRedirect) {\r\n                if (!isLoginCall) {\r\n                    this.cacheStorage.setItem(`${TemporaryCacheKeys.STATE_ACQ_TOKEN}${Constants.resourceDelimiter}${request.state}`, serverAuthenticationRequest.state, this.inCookie);\r\n                }\r\n            } else if (interactionType === Constants.interactionTypePopup) {\r\n                window.renewStates.push(serverAuthenticationRequest.state);\r\n                window.requestType = isLoginCall ? Constants.login : Constants.renewToken;\r\n\r\n                // Register callback to capture results from server\r\n                this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\r\n            } else {\r\n                throw ClientAuthError.createInvalidInteractionTypeError();\r\n            }\r\n\r\n            // prompt user for interaction\r\n            this.navigateWindow(urlNavigate, popUpWindow);\r\n\r\n            // popUpWindow will be null for redirects, so we dont need to attempt to monitor the window\r\n            if (popUpWindow) {\r\n                try {\r\n                    const hash = await WindowUtils.monitorWindowForHash(popUpWindow, this.config.system.loadFrameTimeout, urlNavigate);\r\n\r\n                    this.handleAuthenticationResponse(hash);\r\n\r\n                    // Request completed successfully, set to completed\r\n                    this.cacheStorage.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n                    this.logger.info(\"Closing popup window\");\r\n\r\n                    // TODO: Check how this can be extracted for any framework specific code?\r\n                    if (this.config.framework.isAngular) {\r\n                        this.broadcast(\"msal:popUpHashChanged\", hash);\r\n                        WindowUtils.closePopups();\r\n                    }\r\n                } catch (error) {\r\n                    if (reject) {\r\n                        reject(error);\r\n                    }\r\n\r\n                    if (this.config.framework.isAngular) {\r\n                        this.broadcast(\"msal:popUpClosed\", error.errorCode + Constants.resourceDelimiter + error.errorMessage);\r\n                    } else {\r\n                        // Request failed, set to canceled\r\n                        this.cacheStorage.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n                        popUpWindow.close();\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            this.logger.warning(\"could not resolve endpoints\");\r\n            this.cacheStorage.resetTempCacheItems(request.state);\r\n            this.authErrorHandler(interactionType, ClientAuthError.createEndpointResolutionError(err.toString), buildResponseStateOnly(request.state), reject);\r\n            if (popUpWindow) {\r\n                popUpWindow.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * API interfacing idToken request when applications already have a session/hint acquired by authorization client applications\r\n     * @param request\r\n     */\r\n    ssoSilent(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        // throw an error on an empty request\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n\r\n        // throw an error on no hints passed\r\n        if (!request.sid && !request.loginHint) {\r\n            throw ClientConfigurationError.createSsoSilentError();\r\n        }\r\n\r\n        return this.acquireTokenSilent({\r\n            ...request,\r\n            scopes: [this.clientId]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this function to obtain a token before every call to the API / resource provider\r\n     *\r\n     * MSAL return's a cached token when available\r\n     * Or it send's a request to the STS to obtain a new token using a hidden iframe.\r\n     *\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     *\r\n     */\r\n    acquireTokenSilent(userRequest: AuthenticationParameters): Promise<AuthResponse> {\r\n        // validate the request\r\n        const request = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants.interactionTypeSilent);\r\n        const apiEvent: ApiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.AcquireTokenSilent, this.logger);\r\n        const requestSignature = RequestUtils.createRequestSignature(request);\r\n\r\n        return new Promise<AuthResponse>((resolve, reject) => {\r\n\r\n            // block the request if made from the hidden iframe\r\n            WindowUtils.blockReloadInHiddenIframes();\r\n\r\n            const scope = request.scopes.join(\" \").toLowerCase();\r\n\r\n            // if the developer passes an account, give that account the priority\r\n            const account: Account = request.account || this.getAccount();\r\n\r\n            // extract if there is an adalIdToken stashed in the cache\r\n            const adalIdToken = this.cacheStorage.getItem(Constants.adalIdToken);\r\n\r\n            // if there is no account logged in and no login_hint/sid is passed in the request\r\n            if (!account && !(request.sid  || request.loginHint) && StringUtils.isEmpty(adalIdToken) ) {\r\n                this.logger.info(\"User login is required\");\r\n                return reject(ClientAuthError.createUserLoginRequiredError());\r\n            }\r\n\r\n            // set the response type based on the current cache status / scopes set\r\n            const responseType = this.getTokenType(account, request.scopes, true);\r\n\r\n            // create a serverAuthenticationRequest populating the `queryParameters` to be sent to the Server\r\n            const serverAuthenticationRequest = new ServerRequestParameters(\r\n                AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority),\r\n                this.clientId,\r\n                responseType,\r\n                this.getRedirectUri(request.redirectUri),\r\n                request.scopes,\r\n                request.state,\r\n                request.correlationId,\r\n            );\r\n\r\n            // populate QueryParameters (sid/login_hint) and any other extraQueryParameters set by the developer\r\n            if (ServerRequestParameters.isSSOParam(request) || account) {\r\n                serverAuthenticationRequest.populateQueryParams(account, request, null, true);\r\n            }\r\n            // if user didn't pass login_hint/sid and adal's idtoken is present, extract the login_hint from the adalIdToken\r\n            else if (!account && !StringUtils.isEmpty(adalIdToken)) {\r\n                // if adalIdToken exists, extract the SSO info from the same\r\n                const adalIdTokenObject = TokenUtils.extractIdToken(adalIdToken);\r\n                this.logger.verbose(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\r\n                serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject, true);\r\n            }\r\n\r\n            const userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;\r\n\r\n            let authErr: AuthError;\r\n            let cacheResultResponse;\r\n\r\n            if (!userContainedClaims && !request.forceRefresh) {\r\n                try {\r\n                    cacheResultResponse = this.getCachedToken(serverAuthenticationRequest, account);\r\n                } catch (e) {\r\n                    authErr = e;\r\n                }\r\n            }\r\n\r\n            // resolve/reject based on cacheResult\r\n            if (cacheResultResponse) {\r\n                this.logger.info(\"Token is already in cache for scope:\" + scope);\r\n                resolve(cacheResultResponse);\r\n                return null;\r\n            }\r\n            else if (authErr) {\r\n                this.logger.infoPii(authErr.errorCode + \":\" + authErr.errorMessage);\r\n                reject(authErr);\r\n                return null;\r\n            }\r\n            // else proceed with login\r\n            else {\r\n                let logMessage;\r\n                if (userContainedClaims) {\r\n                    logMessage = \"Skipped cache lookup since claims were given.\";\r\n                } else if (request.forceRefresh) {\r\n                    logMessage = \"Skipped cache lookup since request.forceRefresh option was set to true\";\r\n                } else {\r\n                    logMessage = \"Token is not in cache for scope:\" + scope;\r\n                }\r\n                this.logger.verbose(logMessage);\r\n\r\n                // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the api.\r\n                if (!serverAuthenticationRequest.authorityInstance) {\r\n                    serverAuthenticationRequest.authorityInstance = request.authority ? AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;\r\n                }\r\n                // cache miss\r\n\r\n                // start http event\r\n                return serverAuthenticationRequest.authorityInstance.resolveEndpointsAsync(this.telemetryManager, request.correlationId)\r\n                    .then(() => {\r\n                        /*\r\n                         * refresh attempt with iframe\r\n                         * Already renewing for this scope, callback when we get the token.\r\n                         */\r\n                        if (window.activeRenewals[requestSignature]) {\r\n                            this.logger.verbose(\"Renew token for scope and authority: \" + requestSignature + \" is in progress. Registering callback\");\r\n                            // Active renewals contains the state for each renewal.\r\n                            this.registerCallback(window.activeRenewals[requestSignature], requestSignature, resolve, reject);\r\n                        }\r\n                        else {\r\n                            if (request.scopes && request.scopes.indexOf(this.clientId) > -1 && request.scopes.length === 1) {\r\n                                /*\r\n                                 * App uses idToken to send to api endpoints\r\n                                 * Default scope is tracked as clientId to store this token\r\n                                 */\r\n                                this.logger.verbose(\"renewing idToken\");\r\n                                this.silentLogin = true;\r\n                                this.renewIdToken(requestSignature, resolve, reject, account, serverAuthenticationRequest);\r\n                            } else {\r\n                                // renew access token\r\n                                this.logger.verbose(\"renewing accesstoken\");\r\n                                this.renewToken(requestSignature, resolve, reject, account, serverAuthenticationRequest);\r\n                            }\r\n                        }\r\n                    }).catch((err) => {\r\n                        this.logger.warning(\"could not resolve endpoints\");\r\n                        reject(ClientAuthError.createEndpointResolutionError(err.toString()));\r\n                        return null;\r\n                    });\r\n            }\r\n        })\r\n            .then(res => {\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);\r\n                return res;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.cacheStorage.resetTempCacheItems(request.state);\r\n                this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Popup Window Creation\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    private openPopup(urlNavigate: string, title: string, popUpWidth: number, popUpHeight: number) {\r\n        try {\r\n            /**\r\n             * adding winLeft and winTop to account for dual monitor\r\n             * using screenLeft and screenTop for IE8 and earlier\r\n             */\r\n            const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n            const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n            /**\r\n             * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n             * using document.documentElement.clientWidth for IE8 and earlier\r\n             */\r\n            const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n            const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n            const left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n            const top = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n\r\n            // open the window\r\n            const popupWindow = window.open(urlNavigate, title, \"width=\" + popUpWidth + \", height=\" + popUpHeight + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\r\n            if (!popupWindow) {\r\n                throw ClientAuthError.createPopupWindowError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.cacheStorage.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n            throw ClientAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Iframe Management\r\n\r\n    /**\r\n     * @hidden\r\n     * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.\r\n     * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.\r\n     * @ignore\r\n     */\r\n    private async loadIframeTimeout(urlNavigate: string, frameName: string, requestSignature: string): Promise<void> {\r\n        // set iframe session to pending\r\n        const expectedState = window.activeRenewals[requestSignature];\r\n        this.logger.verbose(\"Set loading state to pending for: \" + requestSignature + \":\" + expectedState);\r\n        this.cacheStorage.setItem(`${TemporaryCacheKeys.RENEW_STATUS}${Constants.resourceDelimiter}${expectedState}`, Constants.inProgress);\r\n\r\n        // render the iframe synchronously if app chooses no timeout, else wait for the set timer to expire\r\n        const iframe: HTMLIFrameElement = this.config.system.navigateFrameWait ?\r\n            await WindowUtils.loadFrame(urlNavigate, frameName, this.config.system.navigateFrameWait, this.logger):\r\n            WindowUtils.loadFrameSync(urlNavigate, frameName, this.logger);\r\n\r\n        try {\r\n            const hash = await WindowUtils.monitorWindowForHash(iframe.contentWindow, this.config.system.loadFrameTimeout, urlNavigate, true);\r\n\r\n            if (hash) {\r\n                this.handleAuthenticationResponse(hash);\r\n            }\r\n        } catch (error) {\r\n            if (this.cacheStorage.getItem(`${TemporaryCacheKeys.RENEW_STATUS}${Constants.resourceDelimiter}${expectedState}`) === Constants.inProgress) {\r\n                // fail the iframe session if it's in pending state\r\n                this.logger.verbose(\"Loading frame has timed out after: \" + (this.config.system.loadFrameTimeout / 1000) + \" seconds for scope/authority \" + requestSignature + \":\" + expectedState);\r\n                // Error after timeout\r\n                if (expectedState && window.callbackMappedToRenewStates[expectedState]) {\r\n                    window.callbackMappedToRenewStates[expectedState](null, error);\r\n                }\r\n\r\n                this.cacheStorage.removeItem(`${TemporaryCacheKeys.RENEW_STATUS}${Constants.resourceDelimiter}${expectedState}`);\r\n            }\r\n            WindowUtils.removeHiddenIframe(iframe);\r\n            throw error;\r\n        }\r\n        WindowUtils.removeHiddenIframe(iframe);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region General Helpers\r\n\r\n    /**\r\n     * @hidden\r\n     * Used to redirect the browser to the STS authorization endpoint\r\n     * @param {string} urlNavigate - URL of the authorization endpoint\r\n     */\r\n    private navigateWindow(urlNavigate: string, popupWindow?: Window) {\r\n        // Navigate if valid URL\r\n        if (urlNavigate && !StringUtils.isEmpty(urlNavigate)) {\r\n            const navigateWindow: Window = popupWindow ? popupWindow : window;\r\n            const logMessage: string = popupWindow ? \"Navigated Popup window to:\" + urlNavigate : \"Navigate to:\" + urlNavigate;\r\n            this.logger.infoPii(logMessage);\r\n            navigateWindow.location.assign(urlNavigate);\r\n        }\r\n        else {\r\n            this.logger.info(\"Navigate url is empty\");\r\n            throw AuthError.createUnexpectedError(\"Navigate url is empty\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object\r\n     * @param {string} expectedState - Unique state identifier (guid).\r\n     * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {Function} resolve - The resolve function of the promise object.\r\n     * @param {Function} reject - The reject function of the promise object.\r\n     * @ignore\r\n     */\r\n    private registerCallback(expectedState: string, requestSignature: string, resolve: Function, reject: Function): void {\r\n        // track active renewals\r\n        window.activeRenewals[requestSignature] = expectedState;\r\n\r\n        // initialize callbacks mapped array\r\n        if (!window.promiseMappedToRenewStates[expectedState]) {\r\n            window.promiseMappedToRenewStates[expectedState] = [];\r\n        }\r\n        // indexing on the current state, push the callback params to callbacks mapped\r\n        window.promiseMappedToRenewStates[expectedState].push({ resolve: resolve, reject: reject });\r\n\r\n        // Store the server response in the current window??\r\n        if (!window.callbackMappedToRenewStates[expectedState]) {\r\n            window.callbackMappedToRenewStates[expectedState] = (response: AuthResponse, error: AuthError) => {\r\n                // reset active renewals\r\n                window.activeRenewals[requestSignature] = null;\r\n\r\n                // for all promiseMappedtoRenewStates for a given 'state' - call the reject/resolve with error/token respectively\r\n                for (let i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {\r\n                    try {\r\n                        if (error) {\r\n                            window.promiseMappedToRenewStates[expectedState][i].reject(error);\r\n                        } else if (response) {\r\n                            window.promiseMappedToRenewStates[expectedState][i].resolve(response);\r\n                        } else {\r\n                            this.cacheStorage.resetTempCacheItems(expectedState);\r\n                            throw AuthError.createUnexpectedError(\"Error and response are both null\");\r\n                        }\r\n                    } catch (e) {\r\n                        this.logger.warning(e);\r\n                    }\r\n                }\r\n\r\n                // reset\r\n                window.promiseMappedToRenewStates[expectedState] = null;\r\n                window.callbackMappedToRenewStates[expectedState] = null;\r\n            };\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Logout\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     */\r\n    logout(correlationId?: string): void {\r\n        // TODO this new correlation id passed in, is not appended to logout request, should add\r\n        const requestCorrelationId = correlationId || CryptoUtils.createNewGuid();\r\n        const apiEvent = this.telemetryManager.createAndStartApiEvent(requestCorrelationId, API_EVENT_IDENTIFIER.Logout, this.logger);\r\n\r\n        this.clearCache();\r\n        this.account = null;\r\n        let logout = \"\";\r\n        if (this.getPostLogoutRedirectUri()) {\r\n            logout = \"post_logout_redirect_uri=\" + encodeURIComponent(this.getPostLogoutRedirectUri());\r\n        }\r\n        this.authorityInstance.resolveEndpointsAsync(this.telemetryManager, requestCorrelationId)\r\n            .then(authority => {\r\n                const urlNavigate = authority.EndSessionEndpoint\r\n                    ? `${authority.EndSessionEndpoint}?${logout}`\r\n                    : `${this.authority}oauth2/v2.0/logout?${logout}`;\r\n                this.telemetryManager.stopAndFlushApiEvent(requestCorrelationId, apiEvent, true);\r\n                this.navigateWindow(urlNavigate);\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.telemetryManager.stopAndFlushApiEvent(requestCorrelationId, apiEvent, false, error.errorCode);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Clear all access tokens in the cache.\r\n     * @ignore\r\n     */\r\n    protected clearCache(): void {\r\n        window.renewStates = [];\r\n        const accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n        for (let i = 0; i < accessTokenItems.length; i++) {\r\n            this.cacheStorage.removeItem(JSON.stringify(accessTokenItems[i].key));\r\n        }\r\n        this.cacheStorage.resetCacheItems();\r\n        // state not being sent would mean this call may not be needed; check later\r\n        this.cacheStorage.clearMsalCookie();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Clear a given access token from the cache.\r\n     *\r\n     * @param accessToken\r\n     */\r\n    protected clearCacheForScope(accessToken: string) {\r\n        const accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n        for (let i = 0; i < accessTokenItems.length; i++) {\r\n            const token = accessTokenItems[i];\r\n            if (token.value.accessToken === accessToken) {\r\n                this.cacheStorage.removeItem(JSON.stringify(token.key));\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Response\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.\r\n     * @param {string} hash - Hash passed from redirect page.\r\n     * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.\r\n     */\r\n    isCallback(hash: string): boolean {\r\n        this.logger.info(\"isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.\");\r\n        return UrlUtils.urlContainsHash(hash);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Used to call the constructor callback with the token/error\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    private processCallBack(hash: string, stateInfo: ResponseStateInfo, parentCallback?: Function): void {\r\n        this.logger.info(\"Processing the callback from redirect response\");\r\n        // get the state info from the hash\r\n        if (!stateInfo) {\r\n            stateInfo = this.getResponseState(hash);\r\n        }\r\n\r\n        let response : AuthResponse;\r\n        let authErr : AuthError;\r\n        // Save the token info from the hash\r\n        try {\r\n            response = this.saveTokenFromHash(hash, stateInfo);\r\n        } catch (err) {\r\n            authErr = err;\r\n        }\r\n\r\n        try {\r\n            // Clear the cookie in the hash\r\n            this.cacheStorage.clearMsalCookie(stateInfo.state);\r\n            const accountState: string = this.getAccountState(stateInfo.state);\r\n            if (response) {\r\n                if ((stateInfo.requestType === Constants.renewToken) || response.accessToken) {\r\n                    if (window.parent !== window) {\r\n                        this.logger.verbose(\"Window is in iframe, acquiring token silently\");\r\n                    } else {\r\n                        this.logger.verbose(\"acquiring token interactive in progress\");\r\n                    }\r\n                    response.tokenType = ServerHashParamKeys.ACCESS_TOKEN;\r\n                }\r\n                else if (stateInfo.requestType === Constants.login) {\r\n                    response.tokenType = ServerHashParamKeys.ID_TOKEN;\r\n                }\r\n                if (!parentCallback) {\r\n                    this.redirectResponse = response;\r\n                    return;\r\n                }\r\n            } else if (!parentCallback) {\r\n                this.redirectResponse = buildResponseStateOnly(accountState);\r\n                this.redirectError = authErr;\r\n                this.cacheStorage.resetTempCacheItems(stateInfo.state);\r\n                return;\r\n            }\r\n\r\n            parentCallback(response, authErr);\r\n        } catch (err) {\r\n            this.logger.error(\"Error occurred in token received callback function: \" + err);\r\n            throw ClientAuthError.createErrorInCallbackFunction(err.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * This method must be called for processing the response received from the STS if using popups or iframes. It extracts the hash, processes the token or error\r\n     * information and saves it in the cache. It then resolves the promises with the result.\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    private handleAuthenticationResponse(hash: string): void {\r\n        // retrieve the hash\r\n        const locationHash = hash || window.location.hash;\r\n\r\n        // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically\r\n        const stateInfo = this.getResponseState(locationHash);\r\n\r\n        const tokenResponseCallback = window.callbackMappedToRenewStates[stateInfo.state];\r\n        this.processCallBack(locationHash, stateInfo, tokenResponseCallback);\r\n\r\n        // If current window is opener, close all windows\r\n        WindowUtils.closePopups();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * This method must be called for processing the response received from the STS when using redirect flows. It extracts the hash, processes the token or error\r\n     * information and saves it in the cache. The result can then be accessed by user registered callbacks.\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    private handleRedirectAuthenticationResponse(hash: string): void {\r\n        this.logger.info(\"Returned from redirect url\");\r\n\r\n        // clear hash from window\r\n        window.location.hash = \"\";\r\n\r\n        // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically\r\n        const stateInfo = this.getResponseState(hash);\r\n\r\n        // if set to navigate to loginRequest page post login\r\n        if (this.config.auth.navigateToLoginRequestUrl && window.parent === window) {\r\n            const loginRequestUrl = this.cacheStorage.getItem(`${TemporaryCacheKeys.LOGIN_REQUEST}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie);\r\n\r\n            // Redirect to home page if login request url is null (real null or the string null)\r\n            if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                this.logger.error(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                window.location.assign(\"/\");\r\n                return;\r\n            } else {\r\n                const currentUrl = UrlUtils.removeHashFromUrl(window.location.href);\r\n                const finalRedirectUrl = UrlUtils.removeHashFromUrl(loginRequestUrl);\r\n                if (currentUrl !== finalRedirectUrl) {\r\n                    window.location.assign(`${finalRedirectUrl}${hash}`);\r\n                    return;\r\n                } else {\r\n                    const loginRequestUrlComponents = UrlUtils.GetUrlComponents(loginRequestUrl);\r\n                    if (loginRequestUrlComponents.Hash){\r\n                        window.location.hash = loginRequestUrlComponents.Hash;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.processCallBack(hash, stateInfo, null);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Creates a stateInfo object from the URL fragment and returns it.\r\n     * @param {string} hash  -  Hash passed from redirect page\r\n     * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @ignore\r\n     */\r\n    protected getResponseState(hash: string): ResponseStateInfo {\r\n        const parameters = UrlUtils.deserializeHash(hash);\r\n        let stateResponse: ResponseStateInfo;\r\n        if (!parameters) {\r\n            throw AuthError.createUnexpectedError(\"Hash was not parsed correctly.\");\r\n        }\r\n        if (parameters.hasOwnProperty(ServerHashParamKeys.STATE)) {\r\n            const parsedState = RequestUtils.parseLibraryState(parameters.state);\r\n\r\n            stateResponse = {\r\n                requestType: Constants.unknown,\r\n                state: parameters.state,\r\n                timestamp: parsedState.ts,\r\n                method: parsedState.method,\r\n                stateMatch: false\r\n            };\r\n        } else {\r\n            throw AuthError.createUnexpectedError(\"Hash does not contain state.\");\r\n        }\r\n        /*\r\n         * async calls can fire iframe and login request at the same time if developer does not use the API as expected\r\n         * incoming callback needs to be looked up to find the request type\r\n         */\r\n\r\n        // loginRedirect\r\n        if (stateResponse.state === this.cacheStorage.getItem(`${TemporaryCacheKeys.STATE_LOGIN}${Constants.resourceDelimiter}${stateResponse.state}`, this.inCookie) || stateResponse.state === this.silentAuthenticationState) {\r\n            stateResponse.requestType = Constants.login;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n        // acquireTokenRedirect\r\n        else if (stateResponse.state === this.cacheStorage.getItem(`${TemporaryCacheKeys.STATE_ACQ_TOKEN}${Constants.resourceDelimiter}${stateResponse.state}`, this.inCookie)) {\r\n            stateResponse.requestType = Constants.renewToken;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n\r\n        // external api requests may have many renewtoken requests for different resource\r\n        if (!stateResponse.stateMatch) {\r\n            stateResponse.requestType = window.requestType;\r\n            const statesInParentContext = window.renewStates;\r\n            for (let i = 0; i < statesInParentContext.length; i++) {\r\n                if (statesInParentContext[i] === stateResponse.state) {\r\n                    stateResponse.stateMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return stateResponse;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Token Processing (Extract to TokenProcessing.ts)\r\n\r\n    /**\r\n     * @hidden\r\n     * Used to get token for the specified set of scopes from the cache\r\n     * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token\r\n     * @param {Account} account - Account for which the scopes were requested\r\n     */\r\n    private getCachedToken(serverAuthenticationRequest: ServerRequestParameters, account: Account): AuthResponse {\r\n        let accessTokenCacheItem: AccessTokenCacheItem = null;\r\n        const scopes = serverAuthenticationRequest.scopes;\r\n\r\n        // filter by clientId and account\r\n        const tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null);\r\n\r\n        // No match found after initial filtering\r\n        if (tokenCacheItems.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const filteredItems: Array<AccessTokenCacheItem> = [];\r\n\r\n        // if no authority passed\r\n        if (!serverAuthenticationRequest.authority) {\r\n            // filter by scope\r\n            for (let i = 0; i < tokenCacheItems.length; i++) {\r\n                const cacheItem = tokenCacheItems[i];\r\n                const cachedScopes = cacheItem.key.scopes.split(\" \");\r\n                if (ScopeSet.containsScope(cachedScopes, scopes)) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n\r\n            // if only one cached token found\r\n            if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);\r\n            }\r\n            // if more than one cached token is found\r\n            else if (filteredItems.length > 1) {\r\n                throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n            // if no match found, check if there was a single authority used\r\n            else {\r\n                const authorityList = this.getUniqueAuthority(tokenCacheItems, \"authority\");\r\n                if (authorityList.length > 1) {\r\n                    throw ClientAuthError.createMultipleAuthoritiesInCacheError(scopes.toString());\r\n                }\r\n\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(authorityList[0], this.config.auth.validateAuthority);\r\n            }\r\n        }\r\n        // if an authority is passed in the API\r\n        else {\r\n            // filter by authority and scope\r\n            for (let i = 0; i < tokenCacheItems.length; i++) {\r\n                const cacheItem = tokenCacheItems[i];\r\n                const cachedScopes = cacheItem.key.scopes.split(\" \");\r\n                if (ScopeSet.containsScope(cachedScopes, scopes) && UrlUtils.CanonicalizeUri(cacheItem.key.authority) === serverAuthenticationRequest.authority) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n            // no match\r\n            if (filteredItems.length === 0) {\r\n                return null;\r\n            }\r\n            // if only one cachedToken Found\r\n            else if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n            }\r\n            else {\r\n                // if more than one cached token is found\r\n                throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n        }\r\n\r\n        if (accessTokenCacheItem != null) {\r\n            const expired = Number(accessTokenCacheItem.value.expiresIn);\r\n            // If expiration is within offset, it will force renew\r\n            const offset = this.config.system.tokenRenewalOffsetSeconds || 300;\r\n            if (expired && (expired > TimeUtils.now() + offset)) {\r\n                const idTokenObj = new IdToken(accessTokenCacheItem.value.idToken);\r\n                if (!account) {\r\n                    account = this.getAccount();\r\n                    if (!account) {\r\n                        throw AuthError.createUnexpectedError(\"Account should not be null here.\");\r\n                    }\r\n                }\r\n                const aState = this.getAccountState(serverAuthenticationRequest.state);\r\n                const response : AuthResponse = {\r\n                    uniqueId: \"\",\r\n                    tenantId: \"\",\r\n                    tokenType: (accessTokenCacheItem.value.idToken === accessTokenCacheItem.value.accessToken) ? ServerHashParamKeys.ID_TOKEN : ServerHashParamKeys.ACCESS_TOKEN,\r\n                    idToken: idTokenObj,\r\n                    idTokenClaims: idTokenObj.claims,\r\n                    accessToken: accessTokenCacheItem.value.accessToken,\r\n                    scopes: accessTokenCacheItem.key.scopes.split(\" \"),\r\n                    expiresOn: new Date(expired * 1000),\r\n                    account: account,\r\n                    accountState: aState,\r\n                    fromCache: true\r\n                };\r\n                ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                return response;\r\n            } else {\r\n                this.cacheStorage.removeItem(JSON.stringify(filteredItems[0].key));\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Used to get a unique list of authorities from the cache\r\n     * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache\r\n     * @ignore\r\n     */\r\n    private getUniqueAuthority(accessTokenCacheItems: Array<AccessTokenCacheItem>, property: string): Array<string> {\r\n        const authorityList: Array<string> = [];\r\n        const flags: Array<string> = [];\r\n        accessTokenCacheItems.forEach(element => {\r\n            if (element.key.hasOwnProperty(property) && (flags.indexOf(element.key[property]) === -1)) {\r\n                flags.push(element.key[property]);\r\n                authorityList.push(element.key[property]);\r\n            }\r\n        });\r\n        return authorityList;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Check if ADAL id_token exists and return if exists.\r\n     *\r\n     */\r\n    private extractADALIdToken(): any {\r\n        const adalIdToken = this.cacheStorage.getItem(Constants.adalIdToken);\r\n        if (!StringUtils.isEmpty(adalIdToken)) {\r\n            return TokenUtils.extractIdToken(adalIdToken);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Acquires access token using a hidden iframe.\r\n     * @ignore\r\n     */\r\n    private renewToken(requestSignature: string, resolve: Function, reject: Function, account: Account, serverAuthenticationRequest: ServerRequestParameters): void {\r\n        this.logger.verbose(\"renewToken is called for scope and authority: \" + requestSignature);\r\n\r\n        const frameName = WindowUtils.generateFrameName(FramePrefix.TOKEN_FRAME, requestSignature);\r\n        WindowUtils.addHiddenIFrame(frameName, this.logger);\r\n\r\n        this.updateCacheEntries(serverAuthenticationRequest, account, false);\r\n        this.logger.verbose(\"Renew token Expected state: \" + serverAuthenticationRequest.state);\r\n\r\n        // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\r\n        const urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none + Constants.response_mode_fragment;\r\n\r\n        window.renewStates.push(serverAuthenticationRequest.state);\r\n        window.requestType = Constants.renewToken;\r\n        this.registerCallback(serverAuthenticationRequest.state, requestSignature, resolve, reject);\r\n        this.logger.infoPii(\"Navigate to:\" + urlNavigate);\r\n        this.loadIframeTimeout(urlNavigate, frameName, requestSignature).catch(error => reject(error));\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Renews idtoken for app's own backend when clientId is passed as a single scope in the scopes array.\r\n     * @ignore\r\n     */\r\n    private renewIdToken(requestSignature: string, resolve: Function, reject: Function, account: Account, serverAuthenticationRequest: ServerRequestParameters): void {\r\n        this.logger.info(\"renewidToken is called\");\r\n\r\n        const frameName = WindowUtils.generateFrameName(FramePrefix.ID_TOKEN_FRAME, requestSignature);\r\n        WindowUtils.addHiddenIFrame(frameName, this.logger);\r\n\r\n        this.updateCacheEntries(serverAuthenticationRequest, account, false);\r\n\r\n        this.logger.verbose(\"Renew Idtoken Expected state: \" + serverAuthenticationRequest.state);\r\n\r\n        // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\r\n        const urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none + Constants.response_mode_fragment;\r\n\r\n        if (this.silentLogin) {\r\n            window.requestType = Constants.login;\r\n            this.silentAuthenticationState = serverAuthenticationRequest.state;\r\n        } else {\r\n            window.requestType = Constants.renewToken;\r\n            window.renewStates.push(serverAuthenticationRequest.state);\r\n        }\r\n\r\n        // note: scope here is clientId\r\n        this.registerCallback(serverAuthenticationRequest.state, requestSignature, resolve, reject);\r\n        this.logger.infoPii(\"Navigate to:\" + urlNavigate);\r\n        this.loadIframeTimeout(urlNavigate, frameName, requestSignature).catch(error => reject(error));\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.\r\n     * @param {string} authority authority received in the redirect response from AAD.\r\n     * @param {TokenResponse} requestInfo an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @param {Account} account account object for which scopes are consented for. The default account is the logged in account.\r\n     * @param {ClientInfo} clientInfo clientInfo received as part of the response comprising of fields uid and utid.\r\n     * @param {IdToken} idToken idToken received as part of the response.\r\n     * @ignore\r\n     * @private\r\n     */\r\n    /* tslint:disable:no-string-literal */\r\n    private saveAccessToken(response: AuthResponse, authority: string, parameters: any, clientInfo: string, idTokenObj: IdToken): AuthResponse {\r\n        let scope: string;\r\n        const accessTokenResponse = { ...response };\r\n        const clientObj: ClientInfo = new ClientInfo(clientInfo);\r\n        let expiration: number;\r\n\r\n        // if the response contains \"scope\"\r\n        if (parameters.hasOwnProperty(ServerHashParamKeys.SCOPE)) {\r\n            // read the scopes\r\n            scope = parameters[ServerHashParamKeys.SCOPE];\r\n            const consentedScopes = scope.split(\" \");\r\n\r\n            // retrieve all access tokens from the cache, remove the dup scores\r\n            const accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);\r\n\r\n            for (let i = 0; i < accessTokenCacheItems.length; i++) {\r\n                const accessTokenCacheItem = accessTokenCacheItems[i];\r\n\r\n                if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {\r\n                    const cachedScopes = accessTokenCacheItem.key.scopes.split(\" \");\r\n                    if (ScopeSet.isIntersectingScopes(cachedScopes, consentedScopes)) {\r\n                        this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            const expiresIn = TimeUtils.parseExpiresIn(parameters[ServerHashParamKeys.EXPIRES_IN]);\r\n            const parsedState = RequestUtils.parseLibraryState(parameters[ServerHashParamKeys.STATE]);\r\n            expiration = parsedState.ts + expiresIn;\r\n            const accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            const accessTokenValue = new AccessTokenValue(parameters[ServerHashParamKeys.ACCESS_TOKEN], idTokenObj.rawIdToken, expiration.toString(), clientInfo);\r\n\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n\r\n            accessTokenResponse.accessToken  = parameters[ServerHashParamKeys.ACCESS_TOKEN];\r\n            accessTokenResponse.scopes = consentedScopes;\r\n        }\r\n        // if the response does not contain \"scope\" - scope is usually client_id and the token will be id_token\r\n        else {\r\n            scope = this.clientId;\r\n\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            const accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            expiration = Number(idTokenObj.expiration);\r\n            const accessTokenValue = new AccessTokenValue(parameters[ServerHashParamKeys.ID_TOKEN], parameters[ServerHashParamKeys.ID_TOKEN], expiration.toString(), clientInfo);\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n            accessTokenResponse.scopes = [scope];\r\n            accessTokenResponse.accessToken = parameters[ServerHashParamKeys.ID_TOKEN];\r\n        }\r\n\r\n        if (expiration) {\r\n            accessTokenResponse.expiresOn = new Date(expiration * 1000);\r\n        } else {\r\n            this.logger.error(\"Could not parse expiresIn parameter\");\r\n        }\r\n\r\n        return accessTokenResponse;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.\r\n     * @ignore\r\n     */\r\n    protected saveTokenFromHash(hash: string, stateInfo: ResponseStateInfo): AuthResponse {\r\n        this.logger.info(\"State status:\" + stateInfo.stateMatch + \"; Request type:\" + stateInfo.requestType);\r\n\r\n        let response : AuthResponse = {\r\n            uniqueId: \"\",\r\n            tenantId: \"\",\r\n            tokenType: \"\",\r\n            idToken: null,\r\n            idTokenClaims: null,\r\n            accessToken: null,\r\n            scopes: [],\r\n            expiresOn: null,\r\n            account: null,\r\n            accountState: \"\",\r\n            fromCache: false\r\n        };\r\n\r\n        let error: AuthError;\r\n        const hashParams = UrlUtils.deserializeHash(hash);\r\n        let authorityKey: string = \"\";\r\n        let acquireTokenAccountKey: string = \"\";\r\n        let idTokenObj: IdToken = null;\r\n\r\n        // If server returns an error\r\n        if (hashParams.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) || hashParams.hasOwnProperty(ServerHashParamKeys.ERROR)) {\r\n            this.logger.infoPii(\"Error :\" + hashParams[ServerHashParamKeys.ERROR] + \"; Error description:\" + hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            this.cacheStorage.setItem(ErrorCacheKeys.ERROR, hashParams[ServerHashParamKeys.ERROR]);\r\n            this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n\r\n            // login\r\n            if (stateInfo.requestType === Constants.login) {\r\n                this.cacheStorage.setItem(ErrorCacheKeys.LOGIN_ERROR, hashParams[ServerHashParamKeys.ERROR_DESCRIPTION] + \":\" + hashParams[ServerHashParamKeys.ERROR]);\r\n                authorityKey = AuthCache.generateAuthorityKey(stateInfo.state);\r\n            }\r\n\r\n            // acquireToken\r\n            if (stateInfo.requestType === Constants.renewToken) {\r\n                authorityKey = AuthCache.generateAuthorityKey(stateInfo.state);\r\n\r\n                const account: Account = this.getAccount();\r\n                let accountId;\r\n\r\n                if (account && !StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n                    accountId = account.homeAccountIdentifier;\r\n                }\r\n                else {\r\n                    accountId = Constants.no_account;\r\n                }\r\n\r\n                acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountId, stateInfo.state);\r\n            }\r\n\r\n            const {\r\n                [ServerHashParamKeys.ERROR]: hashErr,\r\n                [ServerHashParamKeys.ERROR_DESCRIPTION]: hashErrDesc\r\n            } = hashParams;\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(hashErr) ||\r\n        InteractionRequiredAuthError.isInteractionRequiredError(hashErrDesc)) {\r\n                error = new InteractionRequiredAuthError(hashParams[ServerHashParamKeys.ERROR], hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            } else {\r\n                error = new ServerError(hashParams[ServerHashParamKeys.ERROR], hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            }\r\n        }\r\n        // If the server returns \"Success\"\r\n        else {\r\n            // Verify the state from redirect and record tokens to storage if exists\r\n            if (stateInfo.stateMatch) {\r\n                this.logger.info(\"State is right\");\r\n                if (hashParams.hasOwnProperty(ServerHashParamKeys.SESSION_STATE)) {\r\n                    this.cacheStorage.setItem(`${TemporaryCacheKeys.SESSION_STATE}${Constants.resourceDelimiter}${stateInfo.state}`, hashParams[ServerHashParamKeys.SESSION_STATE]);\r\n                }\r\n                response.accountState = this.getAccountState(stateInfo.state);\r\n\r\n                let clientInfo: string = \"\";\r\n\r\n                // Process access_token\r\n                if (hashParams.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN)) {\r\n                    this.logger.info(\"Fragment has access token\");\r\n                    response.accessToken = hashParams[ServerHashParamKeys.ACCESS_TOKEN];\r\n\r\n                    if (hashParams.hasOwnProperty(ServerHashParamKeys.SCOPE)) {\r\n                        response.scopes = hashParams[ServerHashParamKeys.SCOPE].split(\" \");\r\n                    }\r\n\r\n                    // retrieve the id_token from response if present\r\n                    if (hashParams.hasOwnProperty(ServerHashParamKeys.ID_TOKEN)) {\r\n                        idTokenObj = new IdToken(hashParams[ServerHashParamKeys.ID_TOKEN]);\r\n                        response.idToken = idTokenObj;\r\n                        response.idTokenClaims = idTokenObj.claims;\r\n                    } else {\r\n                        idTokenObj = new IdToken(this.cacheStorage.getItem(PersistentCacheKeys.IDTOKEN));\r\n                        response = ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    }\r\n\r\n                    // set authority\r\n                    const authority: string = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);\r\n\r\n                    // retrieve client_info - if it is not found, generate the uid and utid from idToken\r\n                    if (hashParams.hasOwnProperty(ServerHashParamKeys.CLIENT_INFO)) {\r\n                        clientInfo = hashParams[ServerHashParamKeys.CLIENT_INFO];\r\n                    } else {\r\n                        this.logger.warning(\"ClientInfo not received in the response from AAD\");\r\n                        throw ClientAuthError.createClientInfoNotPopulatedError(\"ClientInfo not received in the response from the server\");\r\n                    }\r\n\r\n                    response.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));\r\n\r\n                    let accountKey: string;\r\n                    if (response.account && !StringUtils.isEmpty(response.account.homeAccountIdentifier)) {\r\n                        accountKey = response.account.homeAccountIdentifier;\r\n                    }\r\n                    else {\r\n                        accountKey = Constants.no_account;\r\n                    }\r\n\r\n                    acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountKey, stateInfo.state);\r\n                    const acquireTokenAccountKey_noaccount = AuthCache.generateAcquireTokenAccountKey(Constants.no_account, stateInfo.state);\r\n\r\n                    const cachedAccount: string = this.cacheStorage.getItem(acquireTokenAccountKey);\r\n                    let acquireTokenAccount: Account;\r\n\r\n                    // Check with the account in the Cache\r\n                    if (!StringUtils.isEmpty(cachedAccount)) {\r\n                        acquireTokenAccount = JSON.parse(cachedAccount);\r\n                        if (response.account && acquireTokenAccount && Account.compareAccounts(response.account, acquireTokenAccount)) {\r\n                            response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                            this.logger.info(\"The user object received in the response is the same as the one passed in the acquireToken request\");\r\n                        }\r\n                        else {\r\n                            this.logger.warning(\r\n                                \"The account object created from the response is not the same as the one passed in the acquireToken request\");\r\n                        }\r\n                    }\r\n                    else if (!StringUtils.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {\r\n                        response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                    }\r\n                }\r\n\r\n                // Process id_token\r\n                if (hashParams.hasOwnProperty(ServerHashParamKeys.ID_TOKEN)) {\r\n                    this.logger.info(\"Fragment has id token\");\r\n\r\n                    // set the idToken\r\n                    idTokenObj = new IdToken(hashParams[ServerHashParamKeys.ID_TOKEN]);\r\n\r\n                    response = ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    if (hashParams.hasOwnProperty(ServerHashParamKeys.CLIENT_INFO)) {\r\n                        clientInfo = hashParams[ServerHashParamKeys.CLIENT_INFO];\r\n                    } else {\r\n                        this.logger.warning(\"ClientInfo not received in the response from AAD\");\r\n                    }\r\n\r\n                    // set authority\r\n                    const authority: string = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);\r\n\r\n                    this.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));\r\n                    response.account = this.account;\r\n\r\n                    if (idTokenObj && idTokenObj.nonce) {\r\n                        // check nonce integrity if idToken has nonce - throw an error if not matched\r\n                        if (idTokenObj.nonce !== this.cacheStorage.getItem(`${TemporaryCacheKeys.NONCE_IDTOKEN}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie)) {\r\n                            this.account = null;\r\n                            this.cacheStorage.setItem(ErrorCacheKeys.LOGIN_ERROR, \"Nonce Mismatch. Expected Nonce: \" + this.cacheStorage.getItem(`${TemporaryCacheKeys.NONCE_IDTOKEN}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\r\n                            this.logger.error(\"Nonce Mismatch.Expected Nonce: \" + this.cacheStorage.getItem(`${TemporaryCacheKeys.NONCE_IDTOKEN}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\r\n                            error = ClientAuthError.createNonceMismatchError(this.cacheStorage.getItem(`${TemporaryCacheKeys.NONCE_IDTOKEN}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie), idTokenObj.nonce);\r\n                        }\r\n                        // Save the token\r\n                        else {\r\n                            this.cacheStorage.setItem(PersistentCacheKeys.IDTOKEN, hashParams[ServerHashParamKeys.ID_TOKEN]);\r\n                            this.cacheStorage.setItem(PersistentCacheKeys.CLIENT_INFO, clientInfo);\r\n\r\n                            // Save idToken as access token for app itself\r\n                            this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                        }\r\n                    } else {\r\n                        authorityKey = stateInfo.state;\r\n                        acquireTokenAccountKey = stateInfo.state;\r\n\r\n                        this.logger.error(\"Invalid id_token received in the response\");\r\n                        error = ClientAuthError.createInvalidIdTokenError(idTokenObj);\r\n                        this.cacheStorage.setItem(ErrorCacheKeys.ERROR, error.errorCode);\r\n                        this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, error.errorMessage);\r\n                    }\r\n                }\r\n            }\r\n            // State mismatch - unexpected/invalid state\r\n            else {\r\n                authorityKey = stateInfo.state;\r\n                acquireTokenAccountKey = stateInfo.state;\r\n\r\n                const expectedState = this.cacheStorage.getItem(`${TemporaryCacheKeys.STATE_LOGIN}${Constants.resourceDelimiter}${stateInfo.state}`, this.inCookie);\r\n                this.logger.error(\"State Mismatch.Expected State: \" + expectedState + \",\" + \"Actual State: \" + stateInfo.state);\r\n                error = ClientAuthError.createInvalidStateError(stateInfo.state, expectedState);\r\n                this.cacheStorage.setItem(ErrorCacheKeys.ERROR, error.errorCode);\r\n                this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, error.errorMessage);\r\n            }\r\n        }\r\n\r\n        // Set status to completed\r\n        this.cacheStorage.removeItem(`${TemporaryCacheKeys.RENEW_STATUS}${Constants.resourceDelimiter}${stateInfo.state}`);\r\n        this.cacheStorage.resetTempCacheItems(stateInfo.state);\r\n\r\n        // this is required if navigateToLoginRequestUrl=false\r\n        if (this.inCookie) {\r\n            this.cacheStorage.setItemCookie(authorityKey, \"\", -1);\r\n            this.cacheStorage.clearMsalCookie(stateInfo.state);\r\n        }\r\n        if (error) {\r\n            // Error case, set status to cancelled\r\n            throw error;\r\n        }\r\n\r\n        if (!response) {\r\n            throw AuthError.createUnexpectedError(\"Response is null\");\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Set Authority when saving Token from the hash\r\n     * @param state\r\n     * @param inCookie\r\n     * @param cacheStorage\r\n     * @param idTokenObj\r\n     * @param response\r\n     */\r\n    private populateAuthority(state: string, inCookie: boolean, cacheStorage: AuthCache, idTokenObj: IdToken): string {\r\n        const authorityKey: string = AuthCache.generateAuthorityKey(state);\r\n        const cachedAuthority: string = cacheStorage.getItem(authorityKey, inCookie);\r\n\r\n        // retrieve the authority from cache and replace with tenantID\r\n        return StringUtils.isEmpty(cachedAuthority) ? cachedAuthority : UrlUtils.replaceTenantPath(cachedAuthority, idTokenObj.tenantId);\r\n    }\r\n\r\n    /* tslint:enable:no-string-literal */\r\n\r\n    // #endregion\r\n\r\n    // #region Account\r\n\r\n    /**\r\n     * Returns the signed in account\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no state is found\r\n     * @returns {@link Account} - the account object stored in MSAL\r\n     */\r\n    getAccount(): Account {\r\n        // if a session already exists, get the account from the session\r\n        if (this.account) {\r\n            return this.account;\r\n        }\r\n\r\n        // frame is used to get idToken and populate the account for the given session\r\n        const rawIdToken = this.cacheStorage.getItem(PersistentCacheKeys.IDTOKEN);\r\n        const rawClientInfo = this.cacheStorage.getItem(PersistentCacheKeys.CLIENT_INFO);\r\n\r\n        if (!StringUtils.isEmpty(rawIdToken) && !StringUtils.isEmpty(rawClientInfo)) {\r\n            const idToken = new IdToken(rawIdToken);\r\n            const clientInfo = new ClientInfo(rawClientInfo);\r\n            this.account = Account.createAccount(idToken, clientInfo);\r\n            return this.account;\r\n        }\r\n        // if login not yet done, return null\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts state value from the accountState sent with the authentication request.\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    getAccountState (state: string) {\r\n        if (state) {\r\n            const splitIndex = state.indexOf(Constants.resourceDelimiter);\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.\r\n     *\r\n     * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.\r\n     */\r\n    getAllAccounts(): Array<Account> {\r\n        const accounts: Array<Account> = [];\r\n        const accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n\r\n        for (let i = 0; i < accessTokenCacheItems.length; i++) {\r\n            const idToken = new IdToken(accessTokenCacheItems[i].value.idToken);\r\n            const clientInfo = new ClientInfo(accessTokenCacheItems[i].value.homeAccountIdentifier);\r\n            const account: Account = Account.createAccount(idToken, clientInfo);\r\n            accounts.push(account);\r\n        }\r\n\r\n        return this.getUniqueAccounts(accounts);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to filter accounts based on homeAccountIdentifier\r\n     * @param {Array<Account>}  Accounts - accounts saved in the cache\r\n     * @ignore\r\n     */\r\n    private getUniqueAccounts(accounts: Array<Account>): Array<Account> {\r\n        if (!accounts || accounts.length <= 1) {\r\n            return accounts;\r\n        }\r\n\r\n        const flags: Array<string> = [];\r\n        const uniqueAccounts: Array<Account> = [];\r\n        for (let index = 0; index < accounts.length; ++index) {\r\n            if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {\r\n                flags.push(accounts[index].homeAccountIdentifier);\r\n                uniqueAccounts.push(accounts[index]);\r\n            }\r\n        }\r\n\r\n        return uniqueAccounts;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Broadcast messages - Used only for Angular?  *\r\n     * @param eventName\r\n     * @param data\r\n     */\r\n    private broadcast(eventName: string, data: string) {\r\n        const evt = new CustomEvent(eventName, { detail: data });\r\n        window.dispatchEvent(evt);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Helper function to retrieve the cached token\r\n     *\r\n     * @param scopes\r\n     * @param {@link Account} account\r\n     * @param state\r\n     * @return {@link AuthResponse} AuthResponse\r\n     */\r\n    protected getCachedTokenInternal(scopes : Array<string> , account: Account, state: string, correlationId?: string): AuthResponse {\r\n        // Get the current session's account object\r\n        const accountObject: Account = account || this.getAccount();\r\n        if (!accountObject) {\r\n            return null;\r\n        }\r\n\r\n        // Construct AuthenticationRequest based on response type; set \"redirectUri\" from the \"request\" which makes this call from Angular - for this.getRedirectUri()\r\n        const newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory.CreateInstance(this.authority, this.config.auth.validateAuthority);\r\n        const responseType = this.getTokenType(accountObject, scopes, true);\r\n\r\n        const serverAuthenticationRequest = new ServerRequestParameters(\r\n            newAuthority,\r\n            this.clientId,\r\n            responseType,\r\n            this.getRedirectUri(),\r\n            scopes,\r\n            state,\r\n            correlationId\r\n        );\r\n\r\n        // get cached token\r\n        return this.getCachedToken(serverAuthenticationRequest, account);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app\r\n     * Note: Please check if we need to set the \"redirectUri\" from the \"request\" which makes this call from Angular - for this.getRedirectUri()\r\n     *\r\n     * @param endpoint\r\n     */\r\n    protected getScopesForEndpoint(endpoint: string) : Array<string> {\r\n        // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\r\n        if (this.config.framework.unprotectedResources.length > 0) {\r\n            for (let i = 0; i < this.config.framework.unprotectedResources.length; i++) {\r\n                if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // process all protected resources and send the matched one\r\n        if (this.config.framework.protectedResourceMap.size > 0) {\r\n            for (const key of Array.from(this.config.framework.protectedResourceMap.keys())) {\r\n                // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1\r\n                if (endpoint.indexOf(key) > -1) {\r\n                    return this.config.framework.protectedResourceMap.get(key);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * default resource will be clientid if nothing specified\r\n         * App will use idtoken for calls to itself\r\n         * check if it's staring from http or https, needs to match with app host\r\n         */\r\n        if (endpoint.indexOf(\"http://\") > -1 || endpoint.indexOf(\"https://\") > -1) {\r\n            if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(this.getRedirectUri())) {\r\n                return new Array<string>(this.clientId);\r\n            }\r\n        } else {\r\n            /*\r\n             * in angular level, the url for $http interceptor call could be relative url,\r\n             * if it's relative call, we'll treat it as app backend call.\r\n             */\r\n            return new Array<string>(this.clientId);\r\n        }\r\n\r\n        // if not the app's own backend or not a domain listed in the endpoints structure\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return boolean flag to developer to help inform if login is in progress\r\n     * @returns {boolean} true/false\r\n     */\r\n    public getLoginInProgress(): boolean {\r\n        return this.cacheStorage.getItem(TemporaryCacheKeys.INTERACTION_STATUS) === Constants.inProgress;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param loginInProgress\r\n     */\r\n    protected setInteractionInProgress(inProgress: boolean) {\r\n        if (inProgress) {\r\n            this.cacheStorage.setItem(TemporaryCacheKeys.INTERACTION_STATUS, Constants.inProgress);\r\n        } else {\r\n            this.cacheStorage.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param loginInProgress\r\n     */\r\n    protected setloginInProgress(loginInProgress : boolean) {\r\n        this.setInteractionInProgress(loginInProgress);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the status of acquireTokenInProgress\r\n     */\r\n    protected getAcquireTokenInProgress(): boolean {\r\n        return this.cacheStorage.getItem(TemporaryCacheKeys.INTERACTION_STATUS) === Constants.inProgress;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param acquireTokenInProgress\r\n     */\r\n    protected setAcquireTokenInProgress(acquireTokenInProgress : boolean) {\r\n        this.setInteractionInProgress(acquireTokenInProgress);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the logger handle\r\n     */\r\n    getLogger() {\r\n        return this.logger;\r\n    }\r\n\r\n    /**\r\n     * Sets the logger callback.\r\n     * @param logger Logger callback\r\n     */\r\n    setLogger(logger: Logger) {\r\n        this.logger = logger;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Getters and Setters\r\n\r\n    /**\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} redirect URL\r\n     */\r\n    public getRedirectUri(reqRedirectUri?:  string): string {\r\n        if(reqRedirectUri) {\r\n            return reqRedirectUri;\r\n        }\r\n        else if (typeof this.config.auth.redirectUri === \"function\") {\r\n            return this.config.auth.redirectUri();\r\n        }\r\n        return this.config.auth.redirectUri;\r\n    }\r\n\r\n    /**\r\n     * Use to get the post logout redirect uri configured in MSAL or null.\r\n     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} post logout redirect URL\r\n     */\r\n    public getPostLogoutRedirectUri(): string {\r\n        if (typeof this.config.auth.postLogoutRedirectUri === \"function\") {\r\n            return this.config.auth.postLogoutRedirectUri();\r\n        }\r\n        return this.config.auth.postLogoutRedirectUri;\r\n    }\r\n\r\n    /**\r\n     * Use to get the current {@link Configuration} object in MSAL\r\n     *\r\n     * @returns {@link Configuration}\r\n     */\r\n    public getCurrentConfiguration(): Configuration {\r\n        if (!this.config) {\r\n            throw ClientConfigurationError.createNoSetConfigurationError();\r\n        }\r\n        return this.config;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Utils function to create the Authentication\r\n     * @param {@link account} account object\r\n     * @param scopes\r\n     * @param silentCall\r\n     *\r\n     * @returns {string} token type: id_token or access_token\r\n     *\r\n     */\r\n    private getTokenType(accountObject: Account, scopes: string[], silentCall: boolean): string {\r\n        /*\r\n         * if account is passed and matches the account object/or set to getAccount() from cache\r\n         * if client-id is passed as scope, get id_token else token/id_token_token (in case no session exists)\r\n         */\r\n        let tokenType: string;\r\n\r\n        // acquireTokenSilent\r\n        if (silentCall) {\r\n            if (Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n            else {\r\n                tokenType  = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.id_token_token;\r\n            }\r\n\r\n            return tokenType;\r\n        }\r\n        // all other cases\r\n        else {\r\n            if (!Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = ResponseTypes.id_token_token;\r\n            }\r\n            else {\r\n                tokenType = (scopes.indexOf(this.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n\r\n            return tokenType;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cachekeys for and stores the account information in cache\r\n     * @param account\r\n     * @param state\r\n     * @hidden\r\n     */\r\n    private setAccountCache(account: Account, state: string) {\r\n\r\n        // Cache acquireTokenAccountKey\r\n        const accountId = account ? this.getAccountId(account) : Constants.no_account;\r\n\r\n        const acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountId, state);\r\n        this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cacheKey for and stores the authority information in cache\r\n     * @param state\r\n     * @param authority\r\n     * @hidden\r\n     */\r\n    private setAuthorityCache(state: string, authority: string) {\r\n        // Cache authorityKey\r\n        const authorityKey = AuthCache.generateAuthorityKey(state);\r\n        this.cacheStorage.setItem(authorityKey, UrlUtils.CanonicalizeUri(authority), this.inCookie);\r\n    }\r\n\r\n    /**\r\n     * Updates account, authority, and nonce in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    private updateCacheEntries(serverAuthenticationRequest: ServerRequestParameters, account: Account, isLoginCall: boolean, loginStartPage?: string) {\r\n        // Cache account and authority\r\n        if (isLoginCall) {\r\n            // Cache the state, nonce, and login request data\r\n            this.cacheStorage.setItem(`${TemporaryCacheKeys.LOGIN_REQUEST}${Constants.resourceDelimiter}${serverAuthenticationRequest.state}`, loginStartPage, this.inCookie);\r\n            this.cacheStorage.setItem(`${TemporaryCacheKeys.STATE_LOGIN}${Constants.resourceDelimiter}${serverAuthenticationRequest.state}`, serverAuthenticationRequest.state, this.inCookie);\r\n        } else {\r\n            this.setAccountCache(account, serverAuthenticationRequest.state);\r\n        }\r\n        // Cache authorityKey\r\n        this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority);\r\n\r\n        // Cache nonce\r\n        this.cacheStorage.setItem(`${TemporaryCacheKeys.NONCE_IDTOKEN}${Constants.resourceDelimiter}${serverAuthenticationRequest.state}`, serverAuthenticationRequest.nonce, this.inCookie);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique identifier for the logged in account\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    private getAccountId(account: Account): any {\r\n        // return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;\r\n        let accountId: string;\r\n        if (!StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n            accountId = account.homeAccountIdentifier;\r\n        }\r\n        else {\r\n            accountId = Constants.no_account;\r\n        }\r\n\r\n        return accountId;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param extraQueryParameters\r\n     *\r\n     * Construct 'tokenRequest' from the available data in adalIdToken\r\n     */\r\n    private buildIDTokenRequest(request: AuthenticationParameters): AuthenticationParameters {\r\n\r\n        const tokenRequest: AuthenticationParameters = {\r\n            scopes: [this.clientId],\r\n            authority: this.authority,\r\n            account: this.getAccount(),\r\n            extraQueryParameters: request.extraQueryParameters,\r\n            correlationId: request.correlationId\r\n        };\r\n\r\n        return tokenRequest;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param config\r\n     * @param clientId\r\n     *\r\n     * Construct TelemetryManager from Configuration\r\n     */\r\n    private getTelemetryManagerFromConfig(config: TelemetryOptions, clientId: string): TelemetryManager {\r\n        if (!config) { // if unset\r\n            return TelemetryManager.getTelemetrymanagerStub(clientId);\r\n        }\r\n        // if set then validate\r\n        const { applicationName, applicationVersion, telemetryEmitter } = config;\r\n        if (!applicationName || !applicationVersion || !telemetryEmitter) {\r\n            throw ClientConfigurationError.createTelemetryConfigError(config);\r\n        }\r\n        // if valid then construct\r\n        const telemetryPlatform: TelemetryPlatform = {\r\n            applicationName,\r\n            applicationVersion\r\n        };\r\n        const telemetryManagerConfig: TelemetryConfig = {\r\n            platform: telemetryPlatform,\r\n            clientId: clientId\r\n        };\r\n        return new TelemetryManager(telemetryManagerConfig, telemetryEmitter);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority } from \"./authority/Authority\";\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nimport { AuthenticationParameters } from \"./AuthenticationParameters\";\r\nimport { StringDict } from \"./MsalTypes\";\r\nimport { Account } from \"./Account\";\r\nimport { SSOTypes, Constants, PromptState, libraryVersion } from \"./utils/Constants\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n\r\n/**\r\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\r\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\r\n * @hidden\r\n */\r\nexport class ServerRequestParameters {\r\n\r\n    authorityInstance: Authority;\r\n    clientId: string;\r\n    scopes: Array<string>;\r\n\r\n    nonce: string;\r\n    state: string;\r\n\r\n    // telemetry information\r\n    xClientVer: string;\r\n    xClientSku: string;\r\n    correlationId: string;\r\n\r\n    responseType: string;\r\n    redirectUri: string;\r\n\r\n    promptValue: string;\r\n    claimsValue: string;\r\n\r\n    queryParameters: string;\r\n    extraQueryParameters: string;\r\n\r\n    public get authority(): string {\r\n        return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param authority\r\n     * @param clientId\r\n     * @param scope\r\n     * @param responseType\r\n     * @param redirectUri\r\n     * @param state\r\n     */\r\n    constructor (authority: Authority, clientId: string, responseType: string, redirectUri: string, scopes: Array<string>, state: string, correlationId: string) {\r\n        this.authorityInstance = authority;\r\n        this.clientId = clientId;\r\n        this.nonce = CryptoUtils.createNewGuid();\r\n\r\n        // set scope to clientId if null\r\n        this.scopes = scopes? [ ...scopes] : [clientId];\r\n\r\n        // set state (already set at top level)\r\n        this.state = state;\r\n\r\n        // set correlationId\r\n        this.correlationId = correlationId;\r\n\r\n        // telemetry information\r\n        this.xClientSku = \"MSAL.JS\";\r\n        this.xClientVer = libraryVersion();\r\n\r\n        this.responseType = responseType;\r\n        this.redirectUri = redirectUri;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\r\n     * @param request\r\n     * @param serverAuthenticationRequest\r\n     */\r\n    populateQueryParams(account: Account, request: AuthenticationParameters|null, adalIdTokenObject?: object, silentCall?: boolean): void {\r\n        let queryParameters: StringDict = {};\r\n\r\n        if (request) {\r\n            // add the prompt parameter to serverRequestParameters if passed\r\n            if (request.prompt) {\r\n                this.promptValue = request.prompt;\r\n            }\r\n\r\n            // Add claims challenge to serverRequestParameters if passed\r\n            if (request.claimsRequest) {\r\n                this.claimsValue = request.claimsRequest;\r\n            }\r\n\r\n            // if the developer provides one of these, give preference to developer choice\r\n            if (ServerRequestParameters.isSSOParam(request)) {\r\n                queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\r\n            }\r\n        }\r\n\r\n        if (adalIdTokenObject) {\r\n            queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\r\n        }\r\n\r\n        /*\r\n         * adds sid/login_hint if not populated\r\n         * this.logger.verbose(\"Calling addHint parameters\");\r\n         */\r\n        queryParameters = this.addHintParameters(account, queryParameters);\r\n\r\n        // sanity check for developer passed extraQueryParameters\r\n        const eQParams: StringDict|null = request ? request.extraQueryParameters : null;\r\n\r\n        // Populate the extraQueryParameters to be sent to the server\r\n        this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\r\n        this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams, silentCall);\r\n    }\r\n\r\n    // #region QueryParam helpers\r\n\r\n    /**\r\n     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\r\n     * in any login() or acquireToken() calls\r\n     * @param idTokenObject\r\n     * @param extraQueryParameters\r\n     * @param sid\r\n     * @param loginHint\r\n     */\r\n    // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\r\n    private constructUnifiedCacheQueryParameter(request: AuthenticationParameters, idTokenObject: any): StringDict {\r\n\r\n        // preference order: account > sid > login_hint\r\n        let ssoType;\r\n        let ssoData;\r\n        let serverReqParam: StringDict = {};\r\n        // if account info is passed, account.sid > account.login_hint\r\n        if (request) {\r\n            if (request.account) {\r\n                const account: Account = request.account;\r\n                if (account.sid) {\r\n                    ssoType = SSOTypes.SID;\r\n                    ssoData = account.sid;\r\n                }\r\n                else if (account.userName) {\r\n                    ssoType = SSOTypes.LOGIN_HINT;\r\n                    ssoData = account.userName;\r\n                }\r\n            }\r\n            // sid from request\r\n            else if (request.sid) {\r\n                ssoType = SSOTypes.SID;\r\n                ssoData = request.sid;\r\n            }\r\n            // loginHint from request\r\n            else if (request.loginHint) {\r\n                ssoType = SSOTypes.LOGIN_HINT;\r\n                ssoData = request.loginHint;\r\n            }\r\n        }\r\n        // adalIdToken retrieved from cache\r\n        else if (idTokenObject) {\r\n            if (idTokenObject.hasOwnProperty(Constants.upn)) {\r\n                ssoType = SSOTypes.ID_TOKEN;\r\n                ssoData = idTokenObject.upn;\r\n            }\r\n        }\r\n\r\n        serverReqParam = this.addSSOParameter(ssoType, ssoData);\r\n        return serverReqParam;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\r\n     * domain_hint if added skips the email based discovery process of the user - only supported for interactive calls in implicit_flow\r\n     * domain_req utid received as part of the clientInfo\r\n     * login_req uid received as part of clientInfo\r\n     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\r\n     *\r\n     * @param {@link Account} account - Account for which the token is requested\r\n     * @param queryparams\r\n     * @param {@link ServerRequestParameters}\r\n     * @ignore\r\n     */\r\n    private addHintParameters(account: Account, qParams: StringDict): StringDict {\r\n    /*\r\n     * This is a final check for all queryParams added so far; preference order: sid > login_hint\r\n     * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\r\n     */\r\n        if (account && !qParams[SSOTypes.SID]) {\r\n            // sid - populate only if login_hint is not already populated and the account has sid\r\n            const populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;\r\n            if (populateSID) {\r\n                qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\r\n            }\r\n            // login_hint - account.userName\r\n            else {\r\n                const populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);\r\n                if (populateLoginHint) {\r\n                    qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\r\n                }\r\n            }\r\n        }\r\n\r\n        return qParams;\r\n    }\r\n\r\n    /**\r\n     * Add SID to extraQueryParameters\r\n     * @param sid\r\n     */\r\n    private addSSOParameter(ssoType: string, ssoData: string, ssoParam?: StringDict): StringDict {\r\n        if (!ssoParam) {\r\n            ssoParam = {};\r\n        }\r\n\r\n        if (!ssoData) {\r\n            return ssoParam;\r\n        }\r\n\r\n        switch (ssoType) {\r\n            case SSOTypes.SID: {\r\n                ssoParam[SSOTypes.SID] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.ID_TOKEN: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.LOGIN_HINT: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return ssoParam;\r\n    }\r\n\r\n    /**\r\n     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\r\n     * @param extraQueryParameters\r\n     */\r\n    static generateQueryParametersString(queryParameters?: StringDict, silentCall?: boolean): string|null {\r\n        let paramsString: string|null = null;\r\n\r\n        if (queryParameters) {\r\n            Object.keys(queryParameters).forEach((key: string) => {\r\n                // sid cannot be passed along with login_hint or domain_hint\r\n                if(key === Constants.domain_hint && (silentCall || queryParameters[SSOTypes.SID])) {\r\n                    return;\r\n                }\r\n\r\n                if (paramsString == null) {\r\n                    paramsString = `${key}=${encodeURIComponent(queryParameters[key])}`;\r\n                }\r\n                else {\r\n                    paramsString += `&${key}=${encodeURIComponent(queryParameters[key])}`;\r\n                }\r\n            });\r\n        }\r\n\r\n        return paramsString;\r\n    }\r\n    // #endregion\r\n\r\n    /**\r\n     * Check to see if there are SSO params set in the Request\r\n     * @param request\r\n     */\r\n    static isSSOParam(request: AuthenticationParameters) {\r\n        return request && (request.account || request.sid || request.loginHint);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoUtils } from \"./CryptoUtils\";\r\nimport { StringUtils } from \"./StringUtils\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TokenUtils {\r\n\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param jwtToken\r\n     */\r\n    static decodeJwt(jwtToken: string): any {\r\n        if (StringUtils.isEmpty(jwtToken)) {\r\n            return null;\r\n        }\r\n        const idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        const matches = idTokenPartsRegex.exec(jwtToken);\r\n        if (!matches || matches.length < 4) {\r\n            // this._requestContext.logger.warn(\"The returned id_token is not parseable.\");\r\n            return null;\r\n        }\r\n        const crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    }\r\n\r\n    /**\r\n     * Extract IdToken by decoding the RAWIdToken\r\n     *\r\n     * @param encodedIdToken\r\n     */\r\n    static extractIdToken(encodedIdToken: string): any {\r\n    // id token will be decoded to get the username\r\n        const decodedToken = this.decodeJwt(encodedIdToken);\r\n        if (!decodedToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            const base64IdToken = decodedToken.JWSPayload;\r\n            const base64Decoded = CryptoUtils.base64Decode(base64IdToken);\r\n            if (!base64Decoded) {\r\n                // this._requestContext.logger.info(\"The returned id_token could not be base64 url safe decoded.\");\r\n                return null;\r\n            }\r\n            // ECMA script has JSON built-in support\r\n            return JSON.parse(base64Decoded);\r\n        } catch (err) {\r\n            // this._requestContext.logger.error(\"The returned id_token could not be decoded\" + err);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientInfo } from \"./ClientInfo\";\r\nimport { IdToken } from \"./IdToken\";\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\nimport { StringDict } from \"./MsalTypes\";\r\n\r\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\r\nexport class Account {\r\n\r\n    accountIdentifier: string;\r\n    homeAccountIdentifier: string;\r\n    userName: string;\r\n    name: string;\r\n    idToken: StringDict; // will be deprecated soon\r\n    idTokenClaims: StringDict;\r\n    sid: string;\r\n    environment: string;\r\n\r\n    /**\r\n     * Creates an Account Object\r\n     * @praram accountIdentifier\r\n     * @param homeAccountIdentifier\r\n     * @param userName\r\n     * @param name\r\n     * @param idToken\r\n     * @param sid\r\n     * @param environment\r\n     */\r\n    constructor(accountIdentifier: string, homeAccountIdentifier: string, userName: string, name: string, idTokenClaims: StringDict, sid: string,  environment: string) {\r\n        this.accountIdentifier = accountIdentifier;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n        this.userName = userName;\r\n        this.name = name;\r\n        // will be deprecated soon\r\n        this.idToken = idTokenClaims;\r\n        this.idTokenClaims = idTokenClaims;\r\n        this.sid = sid;\r\n        this.environment = environment;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @param idToken\r\n     * @param clientInfo\r\n     */\r\n    static createAccount(idToken: IdToken, clientInfo: ClientInfo): Account {\r\n\r\n        // create accountIdentifier\r\n        const accountIdentifier: string = idToken.objectId ||  idToken.subject;\r\n\r\n        // create homeAccountIdentifier\r\n        const uid: string = clientInfo ? clientInfo.uid : \"\";\r\n        const utid: string = clientInfo ? clientInfo.utid : \"\";\r\n\r\n        let homeAccountIdentifier: string;\r\n        if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\r\n            homeAccountIdentifier = CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\r\n        }\r\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\r\n    }\r\n\r\n    /**\r\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n     *\r\n     * @param a1: Account object\r\n     * @param a2: Account object\r\n     */\r\n    static compareAccounts(a1: Account, a2: Account): boolean {\r\n        if (!a1 || !a2) {\r\n            return false;\r\n        }\r\n        if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\r\n            if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { UrlUtils } from \"./UrlUtils\";\r\nimport { Logger } from \"../Logger\";\r\nimport { AuthCache } from \"../cache/AuthCache\";\r\nimport { TemporaryCacheKeys, Constants } from \"../utils/Constants\";\r\n\r\nexport class WindowUtils {\r\n    /**\r\n     * @hidden\r\n     * Interval in milliseconds that we poll a window\r\n     * @ignore\r\n     */\r\n    private static POLLING_INTERVAL_MS = 50;\r\n\r\n    /**\r\n     * @hidden\r\n     * Checks if the current page is running in an iframe.\r\n     * @ignore\r\n     */\r\n    static isInIframe(): boolean {\r\n        return window.parent !== window;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Check if the current page is running in a popup.\r\n     * @ignore\r\n     */\r\n    static isInPopup(): boolean {\r\n        return !!(window.opener && window.opener !== window);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @param prefix\r\n     * @param scopes\r\n     * @param authority\r\n     */\r\n    static generateFrameName(prefix: string, requestSignature: string): string {\r\n        return `${prefix}${Constants.resourceDelimiter}${requestSignature}`;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Monitors a window until it loads a url with a hash\r\n     * @ignore\r\n     */\r\n    static monitorWindowForHash(contentWindow: Window, timeout: number, urlNavigate: string, isSilentCall?: boolean): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const maxTicks = timeout / WindowUtils.POLLING_INTERVAL_MS;\r\n            let ticks = 0;\r\n\r\n            const intervalId = setInterval(() => {\r\n                if (contentWindow.closed) {\r\n                    clearInterval(intervalId);\r\n                    reject(ClientAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = contentWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                if (isSilentCall) {\r\n                    /*\r\n                     * Always run clock for silent calls\r\n                     * as silent operations should be short,\r\n                     * and to ensure they always at worst timeout.\r\n                     */\r\n                    ticks++;\r\n                } else {\r\n                    // Don't process blank pages or cross domain\r\n                    if (!href || href === \"about:blank\") {\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     * Only run clock when we are on same domain for popups\r\n                     * as popup operations can take a long time.\r\n                     */\r\n                    ticks++;\r\n                }\r\n\r\n                if (href && UrlUtils.urlContainsHash(href)) {\r\n                    clearInterval(intervalId);\r\n                    resolve(contentWindow.location.hash);\r\n                } else if (ticks > maxTicks) {\r\n                    clearInterval(intervalId);\r\n                    reject(ClientAuthError.createTokenRenewalTimeoutError(urlNavigate)); // better error?\r\n                }\r\n            }, WindowUtils.POLLING_INTERVAL_MS);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads iframe with authorization endpoint URL\r\n     * @ignore\r\n     */\r\n    static loadFrame(urlNavigate: string, frameName: string, timeoutMs: number, logger: Logger): Promise<HTMLIFrameElement> {\r\n        /*\r\n         * This trick overcomes iframe navigation in IE\r\n         * IE does not load the page consistently in iframe\r\n         */\r\n        logger.info(\"LoadFrame: \" + frameName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                const frameHandle = this.loadFrameSync(urlNavigate, frameName, logger);\r\n\r\n                if (!frameHandle) {\r\n                    reject(`Unable to load iframe with name: ${frameName}`);\r\n                    return;\r\n                }\r\n\r\n                resolve(frameHandle);\r\n            }, timeoutMs);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n     * @param urlNavigate\r\n     * @param frameName\r\n     * @param logger\r\n     */\r\n    static loadFrameSync(urlNavigate: string, frameName: string, logger: Logger): HTMLIFrameElement{\r\n        const frameHandle = WindowUtils.addHiddenIFrame(frameName, logger);\r\n\r\n        // returning to handle null in loadFrame, also to avoid null object access errors\r\n        if (!frameHandle) {\r\n            return null;\r\n        }\r\n        else if (frameHandle.src === \"\" || frameHandle.src === \"about:blank\") {\r\n            frameHandle.src = urlNavigate;\r\n            logger.infoPii(\"Frame Name : \" + frameName + \" Navigated to: \" + urlNavigate);\r\n        }\r\n\r\n        return frameHandle;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Adds the hidden iframe for silent token renewal.\r\n     * @ignore\r\n     */\r\n    static addHiddenIFrame(iframeId: string, logger: Logger): HTMLIFrameElement {\r\n        if (typeof iframeId === \"undefined\") {\r\n            return null;\r\n        }\r\n\r\n        logger.info(\"Add msal frame to document:\" + iframeId);\r\n        let adalFrame = document.getElementById(iframeId) as HTMLIFrameElement;\r\n        if (!adalFrame) {\r\n            if (document.createElement &&\r\n        document.documentElement &&\r\n        (window.navigator.userAgent.indexOf(\"MSIE 5.0\") === -1)) {\r\n                const ifr = document.createElement(\"iframe\");\r\n                ifr.setAttribute(\"id\", iframeId);\r\n                ifr.setAttribute(\"aria-hidden\", \"true\");\r\n                ifr.style.visibility = \"hidden\";\r\n                ifr.style.position = \"absolute\";\r\n                ifr.style.width = ifr.style.height = \"0\";\r\n                ifr.style.border = \"0\";\r\n                ifr.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\r\n                adalFrame = (document.getElementsByTagName(\"body\")[0].appendChild(ifr) as HTMLIFrameElement);\r\n            } else if (document.body && document.body.insertAdjacentHTML) {\r\n                document.body.insertAdjacentHTML(\"beforeend\", \"<iframe name='\" + iframeId + \"' id='\" + iframeId + \"' style='display:none'></iframe>\");\r\n            }\r\n\r\n            if (window.frames && window.frames[iframeId]) {\r\n                adalFrame = window.frames[iframeId];\r\n            }\r\n        }\r\n\r\n        return adalFrame;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Removes a hidden iframe from the page.\r\n     * @ignore\r\n     */\r\n    static removeHiddenIframe(iframe: HTMLIFrameElement) {\r\n        if (document.body === iframe.parentNode) {\r\n            document.body.removeChild(iframe);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Find and return the iframe element with the given hash\r\n     * @ignore\r\n     */\r\n    static getIframeWithHash(hash: string): HTMLIFrameElement {\r\n        const iframes = document.getElementsByTagName(\"iframe\");\r\n        const iframeArray: Array<HTMLIFrameElement> = Array.apply(null, Array(iframes.length)).map((iframe: HTMLIFrameElement, index: number) => iframes.item(index)); // eslint-disable-line prefer-spread\r\n\r\n        return iframeArray.filter((iframe: HTMLIFrameElement) => {\r\n            try {\r\n                return iframe.contentWindow.location.hash === hash;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })[0];\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Returns an array of all the popups opened by MSAL\r\n     * @ignore\r\n     */\r\n    static getPopups(): Array<Window> {\r\n        if (!window.openedWindows) {\r\n            window.openedWindows = [];\r\n        }\r\n\r\n        return window.openedWindows;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Find and return the popup with the given hash\r\n     * @ignore\r\n     */\r\n    static getPopUpWithHash(hash: string): Window {\r\n        return WindowUtils.getPopups().filter(popup => {\r\n            try {\r\n                return popup.location.hash === hash;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })[0];\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Add the popup to the known list of popups\r\n     * @ignore\r\n     */\r\n    static trackPopup(popup: Window): void {\r\n        WindowUtils.getPopups().push(popup);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Close all popups\r\n     * @ignore\r\n     */\r\n    static closePopups(): void {\r\n        WindowUtils.getPopups().forEach(popup => popup.close());\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * blocks any login/acquireToken calls to reload from within a hidden iframe (generated for silent calls)\r\n     */\r\n    static blockReloadInHiddenIframes() {\r\n        // return an error if called from the hidden iframe created by the msal js silent calls\r\n        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\r\n            throw ClientAuthError.createBlockTokenRequestsInHiddenIframeError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param cacheStorage\r\n     */\r\n    static checkIfBackButtonIsPressed(cacheStorage: AuthCache) {\r\n        const redirectCache = cacheStorage.getItem(TemporaryCacheKeys.REDIRECT_REQUEST);\r\n\r\n        // if redirect request is set and there is no hash\r\n        if(redirectCache && !UrlUtils.urlContainsHash(window.location.hash)) {\r\n            const splitCache = redirectCache.split(Constants.resourceDelimiter);\r\n            const state = splitCache.length > 1 ? splitCache[splitCache.length-1]: null;\r\n            cacheStorage.resetTempCacheItems(state);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TimeUtils {\r\n    /**\r\n     * Returns time in seconds for expiration based on string value passed in.\r\n     *\r\n     * @param expiresIn\r\n     */\r\n    static parseExpiresIn(expiresIn: string): number {\r\n        // if AAD did not send \"expires_in\" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as \"expires_in\" value instead of 3600\r\n        if (!expiresIn) {\r\n            expiresIn = \"3599\";\r\n        }\r\n        return parseInt(expiresIn, 10);\r\n    }\r\n\r\n    /**\r\n     * Return the current time in Unix time (seconds). Date.getTime() returns in milliseconds.\r\n     */\r\n    static now(): number {\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\r\n\r\nexport class XhrClient {\r\n\r\n    public sendRequestAsync(url: string, method: string, enableCaching?: boolean): Promise<XhrResponse> {\r\n        return new Promise<XhrResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            if (enableCaching) {\r\n                /*\r\n                 * TODO: (shivb) ensure that this can be cached\r\n                 * xhr.setRequestHeader(\"Cache-Control\", \"Public\");\r\n                 */\r\n            }\r\n\r\n            xhr.onload = (ev) => {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(this.handleError(xhr.responseText));\r\n                }\r\n                let jsonResponse;\r\n                try {\r\n                    jsonResponse = JSON.parse(xhr.responseText);\r\n                } catch (e) {\r\n                    reject(this.handleError(xhr.responseText));\r\n                }\r\n                const response: XhrResponse = {\r\n                    statusCode: xhr.status,\r\n                    body: jsonResponse\r\n                };\r\n                resolve(response);\r\n            };\r\n\r\n            xhr.onerror = (ev) => {\r\n                reject(xhr.status);\r\n            };\r\n\r\n            if (method === \"GET\") {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw \"not implemented\";\r\n            }\r\n        });\r\n    }\r\n\r\n    protected handleError(responseText: string): any {\r\n        let jsonResponse;\r\n        try {\r\n            jsonResponse = JSON.parse(responseText);\r\n            if (jsonResponse.error) {\r\n                return jsonResponse.error;\r\n            } else {\r\n                throw responseText;\r\n            }\r\n        } catch (e) {\r\n            return responseText;\r\n        }\r\n    }\r\n}\r\n\r\nexport type XhrResponse = {\r\n    body: any,\r\n    statusCode: number\r\n};\r\n","import TelemetryEvent from \"./TelemetryEvent\";\r\nimport { scrubTenantFromUri, prependEventNamePrefix } from \"./TelemetryUtils\";\r\nimport { ServerRequestParameters } from \"../ServerRequestParameters\";\r\n\r\nexport const EVENT_KEYS = {\r\n    HTTP_PATH: prependEventNamePrefix(\"http_path\"),\r\n    USER_AGENT: prependEventNamePrefix(\"user_agent\"),\r\n    QUERY_PARAMETERS: prependEventNamePrefix(\"query_parameters\"),\r\n    API_VERSION: prependEventNamePrefix(\"api_version\"),\r\n    RESPONSE_CODE: prependEventNamePrefix(\"response_code\"),\r\n    O_AUTH_ERROR_CODE: prependEventNamePrefix(\"oauth_error_code\"),\r\n    HTTP_METHOD: prependEventNamePrefix(\"http_method\"),\r\n    REQUEST_ID_HEADER: prependEventNamePrefix(\"request_id_header\"),\r\n    SPE_INFO: prependEventNamePrefix(\"spe_info\"),\r\n    SERVER_ERROR_CODE: prependEventNamePrefix(\"server_error_code\"),\r\n    SERVER_SUB_ERROR_CODE: prependEventNamePrefix(\"server_sub_error_code\"),\r\n    URL: prependEventNamePrefix(\"url\")\r\n};\r\n\r\nexport default class HttpEvent extends TelemetryEvent {\r\n\r\n    constructor(correlationId: string) {\r\n        super(prependEventNamePrefix(\"http_event\"), correlationId);\r\n    }\r\n\r\n    public set url(url: string) {\r\n        const scrubbedUri = scrubTenantFromUri(url);\r\n        this.event[EVENT_KEYS.URL] = scrubbedUri && scrubbedUri.toLowerCase();\r\n    }\r\n\r\n    public set httpPath(httpPath: string) {\r\n        this.event[EVENT_KEYS.HTTP_PATH] = scrubTenantFromUri(httpPath).toLowerCase();\r\n    }\r\n\r\n    public set userAgent(userAgent: string) {\r\n        this.event[EVENT_KEYS.USER_AGENT] = userAgent;\r\n    }\r\n\r\n    public set queryParams(queryParams: any) {\r\n        this.event[EVENT_KEYS.QUERY_PARAMETERS] = ServerRequestParameters.generateQueryParametersString(queryParams);\r\n    }\r\n\r\n    public set apiVersion(apiVersion: string) {\r\n        this.event[EVENT_KEYS.API_VERSION] = apiVersion.toLowerCase();\r\n    }\r\n\r\n    public set httpResponseStatus(statusCode: number) {\r\n        this.event[EVENT_KEYS.RESPONSE_CODE] = statusCode;\r\n    }\r\n\r\n    public set oAuthErrorCode(errorCode: string) {\r\n        this.event[EVENT_KEYS.O_AUTH_ERROR_CODE] = errorCode;\r\n    }\r\n\r\n    public set httpMethod(httpMethod: string) {\r\n        this.event[EVENT_KEYS.HTTP_METHOD] = httpMethod;\r\n    }\r\n\r\n    public set requestIdHeader(requestIdHeader: string) {\r\n        this.event[EVENT_KEYS.REQUEST_ID_HEADER] = requestIdHeader;\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the request was executed on a ring serving SPE traffic.\r\n     * An empty string indicates this occurred on an outer ring, and the string \"I\"\r\n     * indicates the request occurred on the inner ring\r\n     */\r\n    public set speInfo(speInfo: string) {\r\n        this.event[EVENT_KEYS.SPE_INFO] = speInfo;\r\n    }\r\n\r\n    public set serverErrorCode(errorCode: string) {\r\n        this.event[EVENT_KEYS.SERVER_ERROR_CODE] = errorCode;\r\n    }\r\n\r\n    public set serverSubErrorCode(subErrorCode: string) {\r\n        this.event[EVENT_KEYS.SERVER_SUB_ERROR_CODE] = subErrorCode;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"./Logger\";\r\nimport { UrlUtils } from \"./utils/UrlUtils\";\r\nimport { TelemetryEmitter } from \"./telemetry/TelemetryTypes\";\r\n\r\n/**\r\n * Cache location options supported by MSAL are:\r\n * - local storage: MSAL uses browsers local storage to store its cache\r\n * - session storage: MSAL uses the browsers session storage to store its cache\r\n */\r\nexport type CacheLocation = \"localStorage\" | \"sessionStorage\";\r\n\r\n/**\r\n * Defaults for the Configuration Options\r\n */\r\nconst FRAME_TIMEOUT = 6000;\r\nconst OFFSET = 300;\r\nconst NAVIGATE_FRAME_WAIT = 500;\r\n\r\n/**\r\n * @type AuthOptions: Use this to configure the auth options in the Configuration object\r\n *\r\n *  - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\r\n *  - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\r\n *  - validateAuthority           - Used to turn authority validation on/off. When set to true (default), MSAL will compare the application's authority against well-known URLs templates representing well-formed authorities. It is useful when the authority is obtained at run time to prevent MSAL from displaying authentication prompts from malicious pages.\r\n *  - knownAuthorities            - If validateAuthority is set to True, this will be used to set the Trusted Host list. Defaults to empty array\r\n *  - redirectUri                 - The redirect URI of the application, this should be same as the value in the application registration portal.Defaults to `window.location.href`.\r\n *  - postLogoutRedirectUri       - Used to redirect the user to this location after logout. Defaults to `window.location.href`.\r\n *  - navigateToLoginRequestUrl   - Used to turn off default navigation to start page after login. Default is true. This is used only for redirect flows.\r\n *\r\n */\r\nexport type AuthOptions = {\r\n    clientId: string;\r\n    authority?: string;\r\n    validateAuthority?: boolean;\r\n    knownAuthorities?: Array<string>;\r\n    redirectUri?: string | (() => string);\r\n    postLogoutRedirectUri?: string | (() => string);\r\n    navigateToLoginRequestUrl?: boolean;\r\n};\r\n\r\n/**\r\n * Use this to configure the below cache configuration options:\r\n *\r\n * - cacheLocation            - Used to specify the cacheLocation user wants to set. Valid values are \"localStorage\" and \"sessionStorage\"\r\n * - storeAuthStateInCookie   - If set, MSAL store's the auth request state required for validation of the auth flows in the browser cookies. By default this flag is set to false.\r\n */\r\nexport type CacheOptions = {\r\n    cacheLocation?: CacheLocation;\r\n    storeAuthStateInCookie?: boolean;\r\n};\r\n\r\n/**\r\n * Telemetry Config Options\r\n * - applicationName              - Name of the consuming apps application\r\n * - applicationVersion           - Verison of the consuming application\r\n * - telemetryEmitter             - Function where telemetry events are flushed to\r\n */\r\nexport type TelemetryOptions = {\r\n    applicationName: string;\r\n    applicationVersion: string;\r\n    telemetryEmitter: TelemetryEmitter\r\n    // TODO, add onlyAddFailureTelemetry option\r\n};\r\n\r\n/**\r\n * Library Specific Options\r\n *\r\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\r\n * - loadFrameTimeout             - maximum time the library should wait for a frame to load\r\n * - tokenRenewalOffsetSeconds    - sets the window of offset needed to renew the token before expiry\r\n * - navigateFrameWait            - sets the wait time for hidden iFrame navigation\r\n */\r\nexport type SystemOptions = {\r\n    logger?: Logger;\r\n    loadFrameTimeout?: number;\r\n    tokenRenewalOffsetSeconds?: number;\r\n    navigateFrameWait?: number;\r\n    telemetry?: TelemetryOptions\r\n};\r\n\r\n/**\r\n * App/Framework specific environment support\r\n *\r\n * - isAngular                - flag set to determine if it is Angular Framework. MSAL uses this to broadcast tokens. More to come here: detangle this dependency from core.\r\n * - unprotectedResources     - Array of URI's which are unprotected resources. MSAL will not attach a token to outgoing requests that have these URI. Defaults to 'null'.\r\n * - protectedResourceMap     - This is mapping of resources to scopes used by MSAL for automatically attaching access tokens in web API calls.A single access token is obtained for the resource. So you can map a specific resource path as follows: {\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]}, or the app URL of the resource as: {\"https://graph.microsoft.com/\", [\"user.read\", \"mail.send\"]}. This is required for CORS calls.\r\n *\r\n */\r\nexport type FrameworkOptions = {\r\n    isAngular?: boolean;\r\n    unprotectedResources?: Array<string>;\r\n    protectedResourceMap?: Map<string, Array<string>>;\r\n};\r\n\r\n/**\r\n * Use the configuration object to configure MSAL and initialize the UserAgentApplication.\r\n *\r\n * This object allows you to configure important elements of MSAL functionality:\r\n * - auth: this is where you configure auth elements like clientID,  authority used for authenticating against the Microsoft Identity Platform\r\n * - cache: this is where you configure cache location and whether to store cache in cookies\r\n * - system: this is where you can configure the logger, frame timeout etc.\r\n * - framework: this is where you can configure the running mode of angular. More to come here soon.\r\n */\r\nexport type Configuration = {\r\n    auth: AuthOptions,\r\n    cache?: CacheOptions,\r\n    system?: SystemOptions,\r\n    framework?: FrameworkOptions\r\n};\r\n\r\nconst DEFAULT_AUTH_OPTIONS: AuthOptions = {\r\n    clientId: \"\",\r\n    authority: null,\r\n    validateAuthority: true,\r\n    knownAuthorities: [],\r\n    redirectUri: () => UrlUtils.getCurrentUrl(),\r\n    postLogoutRedirectUri: () => UrlUtils.getCurrentUrl(),\r\n    navigateToLoginRequestUrl: true\r\n};\r\n\r\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {\r\n    cacheLocation: \"sessionStorage\",\r\n    storeAuthStateInCookie: false\r\n};\r\n\r\nconst DEFAULT_SYSTEM_OPTIONS: SystemOptions = {\r\n    logger: new Logger(null),\r\n    loadFrameTimeout: FRAME_TIMEOUT,\r\n    tokenRenewalOffsetSeconds: OFFSET,\r\n    navigateFrameWait: NAVIGATE_FRAME_WAIT\r\n};\r\n\r\nconst DEFAULT_FRAMEWORK_OPTIONS: FrameworkOptions = {\r\n    isAngular: false,\r\n    unprotectedResources: new Array<string>(),\r\n    protectedResourceMap: new Map<string, Array<string>>()\r\n};\r\n\r\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TAuthOptions\r\n * @param TCacheOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n * @param TAuthorityDataOptions\r\n *\r\n * @returns TConfiguration object\r\n */\r\n\r\nexport function buildConfiguration({ auth, cache = {}, system = {}, framework = {}}: Configuration): Configuration {\r\n    const overlayedConfig: Configuration = {\r\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\r\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\r\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system },\r\n        framework: { ...DEFAULT_FRAMEWORK_OPTIONS, ...framework }\r\n    };\r\n    return overlayedConfig;\r\n}\r\n\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerError } from \"./ServerError\";\r\n\r\nexport const InteractionRequiredAuthErrorMessage = {\r\n    interactionRequired: {\r\n        code: \"interaction_required\"\r\n    },\r\n    consentRequired: {\r\n        code: \"consent_required\"\r\n    },\r\n    loginRequired: {\r\n        code: \"login_required\"\r\n    },\r\n};\r\n\r\n/**\r\n * Error thrown when the user is required to perform an interactive token request.\r\n */\r\nexport class InteractionRequiredAuthError extends ServerError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"InteractionRequiredAuthError\";\r\n\r\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\r\n    }\r\n\r\n    static isInteractionRequiredError(errorString: string) : boolean {\r\n        const interactionRequiredCodes = [\r\n            InteractionRequiredAuthErrorMessage.interactionRequired.code,\r\n            InteractionRequiredAuthErrorMessage.consentRequired.code,\r\n            InteractionRequiredAuthErrorMessage.loginRequired.code\r\n        ];\r\n\r\n        return errorString && interactionRequiredCodes.indexOf(errorString) > -1;\r\n    }\r\n\r\n    static createLoginRequiredAuthError(errorDesc: string): InteractionRequiredAuthError {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.loginRequired.code, errorDesc);\r\n    }\r\n\r\n    static createInteractionRequiredAuthError(errorDesc: string): InteractionRequiredAuthError {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.interactionRequired.code, errorDesc);\r\n    }\r\n\r\n    static createConsentRequiredAuthError(errorDesc: string): InteractionRequiredAuthError {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.consentRequired.code, errorDesc);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Account } from \"./Account\";\r\nimport { IdToken } from \"./IdToken\";\r\nimport { StringDict } from \"./MsalTypes\";\r\n\r\nexport type AuthResponse = {\r\n    uniqueId: string;\r\n    tenantId: string;\r\n    tokenType: string;\r\n    idToken: IdToken;\r\n    idTokenClaims: StringDict;\r\n    accessToken: string;\r\n    scopes: Array<string>;\r\n    expiresOn: Date;\r\n    account: Account;\r\n    accountState: string;\r\n    fromCache: boolean\r\n};\r\n\r\nexport function buildResponseStateOnly(state: string) : AuthResponse {\r\n    return {\r\n        uniqueId: \"\",\r\n        tenantId: \"\",\r\n        tokenType: \"\",\r\n        idToken: null,\r\n        idTokenClaims: null,\r\n        accessToken: \"\",\r\n        scopes: null,\r\n        expiresOn: null,\r\n        account: null,\r\n        accountState: state,\r\n        fromCache: false\r\n    };\r\n}\r\n","import TelemetryEvent from \"./TelemetryEvent\";\r\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\r\nimport { scrubTenantFromUri, hashPersonalIdentifier, prependEventNamePrefix } from \"./TelemetryUtils\";\r\nimport { Logger } from \"../Logger\";\r\n\r\nexport const EVENT_KEYS = {\r\n    AUTHORITY: prependEventNamePrefix(\"authority\"),\r\n    AUTHORITY_TYPE: prependEventNamePrefix(\"authority_type\"),\r\n    PROMPT: prependEventNamePrefix(\"ui_behavior\"),\r\n    TENANT_ID: prependEventNamePrefix(\"tenant_id\"),\r\n    USER_ID: prependEventNamePrefix(\"user_id\"),\r\n    WAS_SUCESSFUL: prependEventNamePrefix(\"was_successful\"),\r\n    API_ERROR_CODE: prependEventNamePrefix(\"api_error_code\"),\r\n    LOGIN_HINT: prependEventNamePrefix(\"login_hint\")\r\n};\r\n\r\nexport enum API_CODE {\r\n    AcquireTokenRedirect = 2001,\r\n    AcquireTokenSilent = 2002,\r\n    AcquireTokenPopup = 2003,\r\n    LoginRedirect = 2004,\r\n    LoginPopup = 2005,\r\n    Logout = 2006\r\n}\r\n\r\nexport enum API_EVENT_IDENTIFIER {\r\n    AcquireTokenRedirect = \"AcquireTokenRedirect\",\r\n    AcquireTokenSilent = \"AcquireTokenSilent\",\r\n    AcquireTokenPopup = \"AcquireTokenPopup\",\r\n    LoginRedirect = \"LoginRedirect\",\r\n    LoginPopup = \"LoginPopup\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\nconst mapEventIdentiferToCode = {\r\n    [API_EVENT_IDENTIFIER.AcquireTokenSilent]: API_CODE.AcquireTokenSilent,\r\n    [API_EVENT_IDENTIFIER.AcquireTokenPopup]: API_CODE.AcquireTokenPopup,\r\n    [API_EVENT_IDENTIFIER.AcquireTokenRedirect]: API_CODE.AcquireTokenRedirect,\r\n    [API_EVENT_IDENTIFIER.LoginPopup]: API_CODE.LoginPopup,\r\n    [API_EVENT_IDENTIFIER.LoginRedirect]: API_CODE.LoginRedirect,\r\n    [API_EVENT_IDENTIFIER.Logout]: API_CODE.Logout\r\n};\r\n\r\nexport default class ApiEvent extends TelemetryEvent {\r\n\r\n    private logger: Logger;\r\n\r\n    constructor(correlationId: string, logger: Logger, apiEventIdentifier?: API_EVENT_IDENTIFIER) {\r\n        super(prependEventNamePrefix(\"api_event\"), correlationId);\r\n        if (apiEventIdentifier) {\r\n            this.apiCode = mapEventIdentiferToCode[apiEventIdentifier];\r\n            this.apiEventIdentifier = apiEventIdentifier;\r\n        }\r\n        this.logger = logger;\r\n    }\r\n\r\n    public set apiEventIdentifier(apiEventIdentifier: string) {\r\n        this.event[TELEMETRY_BLOB_EVENT_NAMES.ApiTelemIdConstStrKey] = apiEventIdentifier;\r\n    }\r\n\r\n    public set apiCode(apiCode: number) {\r\n        this.event[TELEMETRY_BLOB_EVENT_NAMES.ApiIdConstStrKey] = apiCode;\r\n    }\r\n\r\n    public set authority(uri: string) {\r\n        this.event[EVENT_KEYS.AUTHORITY] = scrubTenantFromUri(uri).toLowerCase();\r\n    }\r\n\r\n    public set apiErrorCode(errorCode: string) {\r\n        this.event[EVENT_KEYS.API_ERROR_CODE] = errorCode;\r\n    }\r\n\r\n    public set tenantId(tenantId: string) {\r\n        this.event[EVENT_KEYS.TENANT_ID] = this.logger.isPiiLoggingEnabled() && tenantId ?\r\n            hashPersonalIdentifier(tenantId)\r\n            : null;\r\n    }\r\n\r\n    public set accountId(accountId: string) {\r\n        this.event[EVENT_KEYS.USER_ID] = this.logger.isPiiLoggingEnabled() && accountId ?\r\n            hashPersonalIdentifier(accountId)\r\n            : null;\r\n    }\r\n\r\n    public set wasSuccessful(wasSuccessful: boolean) {\r\n        this.event[EVENT_KEYS.WAS_SUCESSFUL] = wasSuccessful;\r\n    }\r\n\r\n    public get wasSuccessful() {\r\n        return this.event[EVENT_KEYS.WAS_SUCESSFUL] === true;\r\n    }\r\n\r\n    public set loginHint(loginHint: string) {\r\n        this.event[EVENT_KEYS.LOGIN_HINT] = this.logger.isPiiLoggingEnabled() && loginHint ?\r\n            hashPersonalIdentifier(loginHint)\r\n            : null;\r\n    }\r\n\r\n    public set authorityType(authorityType: string) {\r\n        this.event[EVENT_KEYS.AUTHORITY_TYPE] = authorityType.toLowerCase();\r\n    }\r\n\r\n    public set promptType(promptType: string) {\r\n        this.event[EVENT_KEYS.PROMPT] = promptType.toLowerCase();\r\n    }\r\n\r\n}\r\n","export { UserAgentApplication, authResponseCallback, errorReceivedCallback, tokenReceivedCallback } from \"./UserAgentApplication\";\r\nexport { Logger } from \"./Logger\";\r\nexport { LogLevel } from \"./Logger\";\r\nexport { Account } from \"./Account\";\r\nexport { Constants, ServerHashParamKeys } from \"./utils/Constants\";\r\nexport { Authority } from \"./authority/Authority\";\r\nexport { CacheResult } from \"./UserAgentApplication\";\r\nexport { CacheLocation, Configuration } from \"./Configuration\";\r\nexport { AuthenticationParameters } from \"./AuthenticationParameters\";\r\nexport { AuthResponse } from \"./AuthResponse\";\r\nexport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nexport { UrlUtils } from \"./utils/UrlUtils\";\r\nexport { WindowUtils } from \"./utils/WindowUtils\";\r\n\r\n// Errors\r\nexport { AuthError } from \"./error/AuthError\";\r\nexport { ClientAuthError } from \"./error/ClientAuthError\";\r\nexport { ServerError } from \"./error/ServerError\";\r\nexport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\r\nexport { InteractionRequiredAuthError } from \"./error/InteractionRequiredAuthError\";\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class AccessTokenKey {\r\n\r\n    authority: string;\r\n    clientId: string;\r\n    scopes: string;\r\n    homeAccountIdentifier: string;\r\n\r\n    constructor(authority: string, clientId: string, scopes: string, uid: string, utid: string) {\r\n        this.authority = UrlUtils.CanonicalizeUri(authority);\r\n        this.clientId = clientId;\r\n        this.scopes = scopes;\r\n        this.homeAccountIdentifier = CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class AccessTokenValue {\r\n\r\n    accessToken: string;\r\n    idToken: string;\r\n    expiresIn: string;\r\n    homeAccountIdentifier: string;\r\n\r\n    constructor(accessToken: string, idToken: string, expiresIn: string, homeAccountIdentifier: string) {\r\n        this.accessToken = accessToken;\r\n        this.idToken = idToken;\r\n        this.expiresIn = expiresIn;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\r\nimport { ClientAuthError } from \"./error/ClientAuthError\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ClientInfo {\r\n\r\n    private _uid: string;\r\n    get uid(): string {\r\n        return this._uid ? this._uid : \"\";\r\n    }\r\n\r\n    set uid(uid: string) {\r\n        this._uid = uid;\r\n    }\r\n\r\n    private _utid: string;\r\n    get utid(): string {\r\n        return this._utid ? this._utid : \"\";\r\n    }\r\n\r\n    set utid(utid: string) {\r\n        this._utid = utid;\r\n    }\r\n\r\n    constructor(rawClientInfo: string) {\r\n        if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\r\n            this.uid = \"\";\r\n            this.utid = \"\";\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const decodedClientInfo: string = CryptoUtils.base64Decode(rawClientInfo);\r\n            const clientInfo: ClientInfo = <ClientInfo>JSON.parse(decodedClientInfo);\r\n            if (clientInfo) {\r\n                if (clientInfo.hasOwnProperty(\"uid\")) {\r\n                    this.uid = clientInfo.uid;\r\n                }\r\n\r\n                if (clientInfo.hasOwnProperty(\"utid\")) {\r\n                    this.utid = clientInfo.utid;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            throw ClientAuthError.createClientInfoDecodingError(e);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientAuthError } from \"./error/ClientAuthError\";\r\nimport { TokenUtils } from \"./utils/TokenUtils\";\r\nimport { StringDict } from \"./MsalTypes\";\r\nimport { StringUtils } from \"./utils/StringUtils\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class IdToken {\r\n\r\n    issuer: string;\r\n    objectId: string;\r\n    subject: string;\r\n    tenantId: string;\r\n    version: string;\r\n    preferredName: string;\r\n    name: string;\r\n    homeObjectId: string;\r\n    nonce: string;\r\n    expiration: string;\r\n    rawIdToken: string;\r\n    claims: StringDict;\r\n    sid: string;\r\n    cloudInstance: string;\r\n    /* tslint:disable:no-string-literal */\r\n    constructor(rawIdToken: string) {\r\n        if (StringUtils.isEmpty(rawIdToken)) {\r\n            throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\r\n        }\r\n        try {\r\n            this.rawIdToken = rawIdToken;\r\n            this.claims = TokenUtils.extractIdToken(rawIdToken);\r\n            if (this.claims) {\r\n                if (this.claims.hasOwnProperty(\"iss\")) {\r\n                    this.issuer = this.claims[\"iss\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"oid\")) {\r\n                    this.objectId = this.claims[\"oid\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"sub\")) {\r\n                    this.subject = this.claims[\"sub\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"tid\")) {\r\n                    this.tenantId = this.claims[\"tid\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"ver\")) {\r\n                    this.version = this.claims[\"ver\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"preferred_username\")) {\r\n                    this.preferredName = this.claims[\"preferred_username\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"name\")) {\r\n                    this.name = this.claims[\"name\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"nonce\")) {\r\n                    this.nonce = this.claims[\"nonce\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"exp\")) {\r\n                    this.expiration = this.claims[\"exp\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"home_oid\")) {\r\n                    this.homeObjectId = this.claims[\"home_oid\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"sid\")) {\r\n                    this.sid = this.claims[\"sid\"];\r\n                }\r\n\r\n                if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\r\n                    this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\r\n                }\r\n                /* tslint:enable:no-string-literal */\r\n            }\r\n        } catch (e) {\r\n            /*\r\n             * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\r\n             * Need to add better error handling here to account for being unable to decode jwts.\r\n             */\r\n            throw ClientAuthError.createIdTokenParsingError(e);\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, PersistentCacheKeys, TemporaryCacheKeys, ErrorCacheKeys} from \"../utils/Constants\";\r\nimport { AccessTokenCacheItem } from \"./AccessTokenCacheItem\";\r\nimport { CacheLocation } from \"../Configuration\";\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class AuthCache extends BrowserStorage {// Singleton\r\n\r\n    private clientId: string;\r\n    private rollbackEnabled: boolean;\r\n\r\n    constructor(clientId: string, cacheLocation: CacheLocation, storeAuthStateInCookie: boolean) {\r\n        super(cacheLocation);\r\n        this.clientId = clientId;\r\n        // This is hardcoded to true for now. We may make this configurable in the future\r\n        this.rollbackEnabled = true;\r\n        this.migrateCacheEntries(storeAuthStateInCookie);\r\n    }\r\n\r\n    /**\r\n     * Support roll back to old cache schema until the next major release: true by default now\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private migrateCacheEntries(storeAuthStateInCookie: boolean) {\r\n\r\n        const idTokenKey = `${Constants.cachePrefix}.${PersistentCacheKeys.IDTOKEN}`;\r\n        const clientInfoKey = `${Constants.cachePrefix}.${PersistentCacheKeys.CLIENT_INFO}`;\r\n        const errorKey = `${Constants.cachePrefix}.${ErrorCacheKeys.ERROR}`;\r\n        const errorDescKey = `${Constants.cachePrefix}.${ErrorCacheKeys.ERROR_DESC}`;\r\n\r\n        const idTokenValue = super.getItem(idTokenKey);\r\n        const clientInfoValue = super.getItem(clientInfoKey);\r\n        const errorValue = super.getItem(errorKey);\r\n        const errorDescValue = super.getItem(errorDescKey);\r\n\r\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        const keysToMigrate = [PersistentCacheKeys.IDTOKEN, PersistentCacheKeys.CLIENT_INFO, ErrorCacheKeys.ERROR, ErrorCacheKeys.ERROR_DESC];\r\n\r\n        keysToMigrate.forEach((cacheKey, index) => this.duplicateCacheEntry(cacheKey, values[index], storeAuthStateInCookie));\r\n    }\r\n\r\n    /**\r\n     * Utility function to help with roll back keys\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private duplicateCacheEntry(newKey: string, value: string, storeAuthStateInCookie?: boolean) {\r\n        if (value) {\r\n            this.setItem(newKey, value, storeAuthStateInCookie);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    private generateCacheKey(key: string, addInstanceId: boolean): string {\r\n        try {\r\n            // Defined schemas do not need the key appended\r\n            JSON.parse(key);\r\n            return key;\r\n        } catch (e) {\r\n            if (key.indexOf(`${Constants.cachePrefix}`) === 0 || key.indexOf(Constants.adalIdToken) === 0){\r\n                return key;\r\n            }\r\n            return addInstanceId ? `${Constants.cachePrefix}.${this.clientId}.${key}` : `${Constants.cachePrefix}.${key}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add value to storage\r\n     * @param key\r\n     * @param value\r\n     * @param enableCookieStorage\r\n     */\r\n    setItem(key: string, value: string, enableCookieStorage?: boolean, state?: string): void {\r\n        super.setItem(this.generateCacheKey(key, true), value, enableCookieStorage);\r\n        if (this.rollbackEnabled) {\r\n            super.setItem(this.generateCacheKey(key, false), value, enableCookieStorage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get one item by key from storage\r\n     * @param key\r\n     * @param enableCookieStorage\r\n     */\r\n    getItem(key: string, enableCookieStorage?: boolean): string {\r\n        return super.getItem(this.generateCacheKey(key, true), enableCookieStorage);\r\n    }\r\n\r\n    /**\r\n     * remove value from storage\r\n     * @param key\r\n     */\r\n    removeItem(key: string): void {\r\n        super.removeItem(this.generateCacheKey(key, true));\r\n        if (this.rollbackEnabled) {\r\n            super.removeItem(this.generateCacheKey(key, false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the cache items\r\n     */\r\n    resetCacheItems(): void {\r\n        const storage = window[this.cacheLocation];\r\n        let key: string;\r\n        for (key in storage) {\r\n            // Check if key contains msal prefix; For now, we are clearing all cache items created by MSAL.js\r\n            if (storage.hasOwnProperty(key) && (key.indexOf(Constants.cachePrefix) !== -1)) {\r\n                super.removeItem(key);\r\n                // TODO: Clear cache based on client id (clarify use cases where this is needed)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset all temporary cache items\r\n     */\r\n    resetTempCacheItems(state: string): void {\r\n        const storage = window[this.cacheLocation];\r\n        let key: string;\r\n        // check state and remove associated cache\r\n        for (key in storage) {\r\n            if ((!state || key.indexOf(state) !== -1) && !this.tokenRenewalInProgress(state)) {\r\n                this.removeItem(key);\r\n                this.setItemCookie(key, \"\", -1);\r\n                this.clearMsalCookie(state);\r\n            }\r\n        }\r\n        // delete the interaction status cache\r\n        this.removeItem(TemporaryCacheKeys.INTERACTION_STATUS);\r\n        this.removeItem(TemporaryCacheKeys.REDIRECT_REQUEST);\r\n    }\r\n\r\n    /**\r\n     * Set cookies for IE\r\n     * @param cName\r\n     * @param cValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cName: string, cValue: string, expires?: number): void {\r\n        super.setItemCookie(this.generateCacheKey(cName, true), cValue, expires);\r\n        if (this.rollbackEnabled) {\r\n            super.setItemCookie(this.generateCacheKey(cName, false), cValue, expires);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get one item by key from cookies\r\n     * @param cName\r\n     */\r\n    getItemCookie(cName: string): string {\r\n        return super.getItemCookie(this.generateCacheKey(cName, true));\r\n    }\r\n\r\n    /**\r\n     * Get all access tokens in the cache\r\n     * @param clientId\r\n     * @param homeAccountIdentifier\r\n     */\r\n    getAllAccessTokens(clientId: string, homeAccountIdentifier: string): Array<AccessTokenCacheItem> {\r\n        const results = Object.keys(window[this.cacheLocation]).reduce((tokens, key) => {\r\n            const keyMatches = key.match(clientId) && key.match(homeAccountIdentifier) && key.match(Constants.scopes);\r\n            if ( keyMatches ) {\r\n                const value = this.getItem(key);\r\n                if (value) {\r\n                    try {\r\n                        const parseAtKey = JSON.parse(key);\r\n                        const newAccessTokenCacheItem = new AccessTokenCacheItem(parseAtKey, JSON.parse(value));\r\n                        return tokens.concat([ newAccessTokenCacheItem ]);\r\n                    } catch (e) {\r\n                        throw ClientAuthError.createCacheParseError(key);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return tokens;\r\n        }, []);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Return if the token renewal is still in progress\r\n     * @param stateValue\r\n     */\r\n    private tokenRenewalInProgress(stateValue: string): boolean {\r\n        const renewStatus = this.getItem(`${TemporaryCacheKeys.RENEW_STATUS}|${stateValue}`);\r\n        return !!(renewStatus && renewStatus === Constants.inProgress);\r\n    }\r\n\r\n    /**\r\n     * Clear all cookies\r\n     */\r\n    public clearMsalCookie(state?: string): void {\r\n        this.clearItemCookie(`${TemporaryCacheKeys.NONCE_IDTOKEN}|${state}`);\r\n        this.clearItemCookie(`${TemporaryCacheKeys.STATE_LOGIN}|${state}`);\r\n        this.clearItemCookie(`${TemporaryCacheKeys.LOGIN_REQUEST}|${state}`);\r\n        this.clearItemCookie(`${TemporaryCacheKeys.STATE_ACQ_TOKEN}|${state}`);\r\n    }\r\n\r\n    /**\r\n     * Create acquireTokenAccountKey to cache account object\r\n     * @param accountId\r\n     * @param state\r\n     */\r\n    public static generateAcquireTokenAccountKey(accountId: any, state: string): string {\r\n        return `${TemporaryCacheKeys.ACQUIRE_TOKEN_ACCOUNT}${Constants.resourceDelimiter}${accountId}${Constants.resourceDelimiter}${state}`;\r\n    }\r\n\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    public static generateAuthorityKey(state: string): string {\r\n        return `${TemporaryCacheKeys.AUTHORITY}${Constants.resourceDelimiter}${state}`;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenKey } from \"./AccessTokenKey\";\r\nimport { AccessTokenValue } from \"./AccessTokenValue\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class AccessTokenCacheItem {\r\n\r\n    key: AccessTokenKey;\r\n    value: AccessTokenValue;\r\n\r\n    constructor(key: AccessTokenKey, value: AccessTokenValue) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CacheLocation } from \"../Configuration\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { AuthError } from \"../error/AuthError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class BrowserStorage {// Singleton\r\n\r\n    protected cacheLocation: CacheLocation;\r\n\r\n    constructor(cacheLocation: CacheLocation) {\r\n        if (!window) {\r\n            throw AuthError.createNoWindowObjectError(\"Browser storage class could not find window object\");\r\n        }\r\n\r\n        const storageSupported = typeof window[cacheLocation] !== \"undefined\" && window[cacheLocation] != null;\r\n        if (!storageSupported) {\r\n            throw ClientConfigurationError.createStorageNotSupportedError(cacheLocation);\r\n        }\r\n        this.cacheLocation = cacheLocation;\r\n    }\r\n\r\n    /**\r\n     * add value to storage\r\n     * @param key\r\n     * @param value\r\n     * @param enableCookieStorage\r\n     */\r\n    setItem(key: string, value: string, enableCookieStorage?: boolean): void {\r\n        window[this.cacheLocation].setItem(key, value);\r\n        if (enableCookieStorage) {\r\n            this.setItemCookie(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get one item by key from storage\r\n     * @param key\r\n     * @param enableCookieStorage\r\n     */\r\n    getItem(key: string, enableCookieStorage?: boolean): string {\r\n        if (enableCookieStorage && this.getItemCookie(key)) {\r\n            return this.getItemCookie(key);\r\n        }\r\n        return window[this.cacheLocation].getItem(key);\r\n    }\r\n\r\n    /**\r\n     * remove value from storage\r\n     * @param key\r\n     */\r\n    removeItem(key: string): void {\r\n        return window[this.cacheLocation].removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * clear storage (remove all items from it)\r\n     */\r\n    clear(): void {\r\n        return window[this.cacheLocation].clear();\r\n    }\r\n\r\n    /**\r\n     * add value to cookies\r\n     * @param cName\r\n     * @param cValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cName: string, cValue: string, expires?: number): void {\r\n        let cookieStr = cName + \"=\" + cValue + \";path=/;\";\r\n        if (expires) {\r\n            const expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += \"expires=\" + expireTime + \";\";\r\n        }\r\n\r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * get one item by key from cookies\r\n     * @param cName\r\n     */\r\n    getItemCookie(cName: string): string {\r\n        const name = cName + \"=\";\r\n        const ca = document.cookie.split(\";\");\r\n        for (let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) === \" \") {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cName\r\n     */\r\n    clearItemCookie(cName: string) {\r\n        this.setItemCookie(cName, \"\", -1);\r\n    }\r\n\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    getCookieExpirationTime(cookieLifeDays: number): string {\r\n        const today = new Date();\r\n        const expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);\r\n        return expr.toUTCString();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationParameters } from \"../AuthenticationParameters\";\r\nimport { Constants, PromptState, BlacklistedEQParams, InteractionType } from \"../utils/Constants\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ScopeSet } from \"../ScopeSet\";\r\nimport { StringDict } from \"../MsalTypes\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\r\nimport { TimeUtils } from \"./TimeUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\nexport type LibraryStateObject = {\r\n    id: string,\r\n    ts: number\r\n    method: string\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class RequestUtils {\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * @param request\r\n     * @param isLoginCall\r\n     * @param cacheStorage\r\n     * @param clientId\r\n     *\r\n     * validates all request parameters and generates a consumable request object\r\n     */\r\n    static validateRequest(request: AuthenticationParameters, isLoginCall: boolean, clientId: string, interactionType: InteractionType): AuthenticationParameters {\r\n\r\n        // Throw error if request is empty for acquire * calls\r\n        if(!isLoginCall && !request) {\r\n            throw ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n\r\n        let scopes: Array<string>;\r\n        let extraQueryParameters: StringDict;\r\n\r\n        if(request) {\r\n            // if extraScopesToConsent is passed in loginCall, append them to the login request; Validate and filter scopes (the validate function will throw if validation fails)\r\n            scopes = isLoginCall ? ScopeSet.appendScopes(request.scopes, request.extraScopesToConsent) : request.scopes;\r\n            ScopeSet.validateInputScope(scopes, !isLoginCall, clientId);\r\n\r\n            // validate prompt parameter\r\n            this.validatePromptParameter(request.prompt);\r\n\r\n            // validate extraQueryParameters\r\n            extraQueryParameters = this.validateEQParameters(request.extraQueryParameters, request.claimsRequest);\r\n\r\n            // validate claimsRequest\r\n            this.validateClaimsRequest(request.claimsRequest);\r\n\r\n        }\r\n\r\n        // validate and generate state and correlationId\r\n        const state = this.validateAndGenerateState(request && request.state, interactionType);\r\n        const correlationId = this.validateAndGenerateCorrelationId(request && request.correlationId);\r\n\r\n        const validatedRequest: AuthenticationParameters = {\r\n            ...request,\r\n            extraQueryParameters,\r\n            scopes,\r\n            state,\r\n            correlationId\r\n        };\r\n\r\n        return validatedRequest;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Utility to test if valid prompt value is passed in the request\r\n     * @param request\r\n     */\r\n    static validatePromptParameter (prompt: string) {\r\n        if(prompt) {\r\n            if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {\r\n                throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    static validateEQParameters(extraQueryParameters: StringDict, claimsRequest: string) : StringDict {\r\n        const eQParams : StringDict = { ...extraQueryParameters};\r\n        if (!eQParams) {\r\n            return null;\r\n        }\r\n        if (claimsRequest) {\r\n            // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\r\n            delete eQParams[Constants.claims];\r\n        }\r\n        BlacklistedEQParams.forEach(param => {\r\n            if (eQParams[param]) {\r\n                // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\r\n                delete eQParams[param];\r\n            }\r\n        });\r\n\r\n        return eQParams;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Validates the claims passed in request is a JSON\r\n     * TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n     * @param claimsRequest\r\n     */\r\n    static validateClaimsRequest(claimsRequest: string) {\r\n        if (!claimsRequest) {\r\n            return;\r\n        }\r\n        let claims;\r\n        try {\r\n            claims = JSON.parse(claimsRequest);\r\n        } catch (e) {\r\n            throw ClientConfigurationError.createClaimsRequestParsingError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * generate unique state per request\r\n     * @param userState User-provided state value\r\n     * @returns State string include library state and user state\r\n     */\r\n    static validateAndGenerateState(userState: string, interactionType: InteractionType): string {\r\n        return !StringUtils.isEmpty(userState) ? `${RequestUtils.generateLibraryState(interactionType)}${Constants.resourceDelimiter}${userState}` : RequestUtils.generateLibraryState(interactionType);\r\n    }\r\n\r\n    /**\r\n     * Generates the state value used by the library.\r\n     *\r\n     * @returns Base64 encoded string representing the state\r\n     */\r\n    static generateLibraryState(interactionType: InteractionType): string {\r\n        const stateObject: LibraryStateObject = {\r\n            id: CryptoUtils.createNewGuid(),\r\n            ts: TimeUtils.now(),\r\n            method: interactionType\r\n        };\r\n\r\n        const stateString = JSON.stringify(stateObject);\r\n\r\n        return CryptoUtils.base64Encode(stateString);\r\n    }\r\n\r\n    /**\r\n     * Decodes the state value into a StateObject\r\n     *\r\n     * @param state State value returned in the request\r\n     * @returns Parsed values from the encoded state value\r\n     */\r\n    static parseLibraryState(state: string): LibraryStateObject {\r\n        const libraryState = decodeURIComponent(state).split(Constants.resourceDelimiter)[0];\r\n\r\n        if (CryptoUtils.isGuid(libraryState)) {\r\n            // If state is guid, assume timestamp is now and is redirect, as redirect should be only method where this can happen.\r\n            return {\r\n                id: libraryState,\r\n                ts: TimeUtils.now(),\r\n                method: Constants.interactionTypeRedirect\r\n            };\r\n        }\r\n\r\n        try {\r\n            const stateString = CryptoUtils.base64Decode(libraryState);\r\n\r\n            const stateObject = JSON.parse(stateString);\r\n\r\n            return stateObject;\r\n        } catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * validate correlationId and generate if not valid or not set by the user\r\n     * @param correlationId\r\n     */\r\n    static validateAndGenerateCorrelationId(correlationId: string): string {\r\n        // validate user set correlationId or set one for the user if null\r\n        if(correlationId && !CryptoUtils.isGuid(correlationId)) {\r\n            throw ClientConfigurationError.createInvalidCorrelationIdError();\r\n        }\r\n        return CryptoUtils.isGuid(correlationId)? correlationId : CryptoUtils.createNewGuid();\r\n    }\r\n\r\n    /**\r\n     * Create a request signature\r\n     * @param request\r\n     */\r\n    static createRequestSignature(request: AuthenticationParameters): string {\r\n        return `${request.scopes.join(\" \").toLowerCase()}${Constants.resourceDelimiter}${request.authority}`;\r\n    }\r\n}\r\n","import { AuthResponse } from \"../AuthResponse\";\r\nimport { IdToken } from \"../IdToken\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ResponseUtils {\r\n\r\n    static setResponseIdToken(originalResponse: AuthResponse, idTokenObj: IdToken) : AuthResponse {\r\n        if (!originalResponse) {\r\n            return null;\r\n        } else if (!idTokenObj) {\r\n            return originalResponse;\r\n        }\r\n\r\n        const exp = Number(idTokenObj.expiration);\r\n        if (exp && !originalResponse.expiresOn) {\r\n            originalResponse.expiresOn = new Date(exp * 1000);\r\n        }\r\n    \r\n        return {\r\n            ...originalResponse,\r\n            idToken: idTokenObj,\r\n            idTokenClaims: idTokenObj.claims,\r\n            uniqueId: idTokenObj.objectId || idTokenObj.subject,\r\n            tenantId: idTokenObj.tenantId,\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @hidden\r\n */\r\nimport { AadAuthority } from \"./AadAuthority\";\r\nimport { B2cAuthority, B2CTrustedHostList } from \"./B2cAuthority\";\r\nimport { Authority, AuthorityType } from \"./Authority\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\n\r\nexport class AuthorityFactory {\r\n    /**\r\n     * Use when Authority is B2C and validateAuthority is set to True to provide list of allowed domains.\r\n     */\r\n    public static setKnownAuthorities(validateAuthority: boolean, knownAuthorities: Array<string>): void {\r\n        if (validateAuthority && !Object.keys(B2CTrustedHostList).length){\r\n            knownAuthorities.forEach(function(authority){\r\n                B2CTrustedHostList[authority] = authority;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the url and determine the type of authority\r\n     */\r\n    private static detectAuthorityFromUrl(authorityUrl: string): AuthorityType {\r\n        authorityUrl = UrlUtils.CanonicalizeUri(authorityUrl);\r\n        const components = UrlUtils.GetUrlComponents(authorityUrl);\r\n        const pathSegments = components.PathSegments;\r\n\r\n        if (pathSegments[0] === \"adfs\") {\r\n            return AuthorityType.Adfs;\r\n        }\r\n        else if (Object.keys(B2CTrustedHostList).length) {\r\n            return AuthorityType.B2C;\r\n        }\r\n\r\n        // Defaults to Aad\r\n        return AuthorityType.Aad;\r\n    }\t    \r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n     */\r\n    public static CreateInstance(authorityUrl: string, validateAuthority: boolean): Authority {\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            return null;\r\n        }\r\n        const type = AuthorityFactory.detectAuthorityFromUrl(authorityUrl);\r\n        // Depending on above detection, create the right type.\r\n        switch (type) {\r\n            case AuthorityType.B2C:\r\n                return new B2cAuthority(authorityUrl, validateAuthority);\r\n            case AuthorityType.Aad:\r\n                return new AadAuthority(authorityUrl, validateAuthority);\r\n            default:\r\n                throw ClientConfigurationError.createInvalidAuthorityTypeError();\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority, AuthorityType } from \"./Authority\";\r\nimport { XhrClient, XhrResponse } from \"../XHRClient\";\r\nimport { AADTrustedHostList } from \"../utils/Constants\";\r\nimport HttpEvent from \"../telemetry/HttpEvent\";\r\nimport TelemetryManager from \"../telemetry/TelemetryManager\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class AadAuthority extends Authority {\r\n    private static readonly AadInstanceDiscoveryEndpoint: string = \"https://login.microsoftonline.com/common/discovery/instance\";\r\n\r\n    private get AadInstanceDiscoveryEndpointUrl(): string {\r\n        return `${AadAuthority.AadInstanceDiscoveryEndpoint}?api-version=1.0&authorization_endpoint=${this.CanonicalAuthority}oauth2/v2.0/authorize`;\r\n    }\r\n\r\n    public constructor(authority: string, validateAuthority: boolean) {\r\n        super(authority, validateAuthority);\r\n    }\r\n\r\n    public get AuthorityType(): AuthorityType {\r\n        return AuthorityType.Aad;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    public async GetOpenIdConfigurationEndpointAsync(telemetryManager?: TelemetryManager, correlationId?: string): Promise<string> {\r\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n            return this.DefaultOpenIdConfigurationEndpoint;\r\n        }\r\n\r\n        // for custom domains in AAD where we query the service for the Instance discovery\r\n        const client: XhrClient = new XhrClient();\r\n\r\n        const httpMethod = \"GET\";\r\n        const httpEvent: HttpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, this.AadInstanceDiscoveryEndpointUrl);\r\n        return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, httpMethod, true)\r\n            .then((response: XhrResponse) => {\r\n                httpEvent.httpResponseStatus = response.statusCode;\r\n                telemetryManager.stopEvent(httpEvent);\r\n                return response.body.tenant_discovery_endpoint;\r\n            })\r\n            .catch(err => {\r\n                httpEvent.serverErrorCode = err;\r\n                telemetryManager.stopEvent(httpEvent);\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    public IsInTrustedHostList(host: string): boolean {\r\n        return AADTrustedHostList[host.toLowerCase()];\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority } from \"./Authority\";\r\nimport { AuthorityType } from \"./Authority\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\n\r\nexport const B2CTrustedHostList: object = {};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class B2cAuthority extends Authority {\r\n    public static B2C_PREFIX: String = \"tfp\";\r\n    public constructor(authority: string, validateAuthority: boolean) {\r\n        super(authority, validateAuthority);\r\n    }\r\n\r\n    public get AuthorityType(): AuthorityType {\r\n        return AuthorityType.B2C;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    public async GetOpenIdConfigurationEndpointAsync(): Promise<string> {\r\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n            return this.DefaultOpenIdConfigurationEndpoint;\r\n        }\r\n\r\n        throw ClientConfigurationError.createUntrustedAuthorityError();\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    public IsInTrustedHostList(host: string): boolean {\r\n        if (this.IsValidationEnabled && !Object.keys(B2CTrustedHostList).length) {\r\n            throw ClientConfigurationError.createKnownAuthoritiesNotSetError();\r\n        }\r\n        \r\n        return B2CTrustedHostList[host.toLowerCase()];\r\n    }\r\n}\r\n","import TelemetryEvent from \"./TelemetryEvent\";\r\nimport {\r\n    CompletedEvents,\r\n    EventCount,\r\n    EventCountByCorrelationId,\r\n    InProgressEvents,\r\n    TelemetryConfig,\r\n    TelemetryPlatform,\r\n    TelemetryEmitter\r\n} from \"./TelemetryTypes\";\r\nimport DefaultEvent from \"./DefaultEvent\";\r\nimport { libraryVersion, Constants } from \"../utils/Constants\";\r\nimport ApiEvent, { API_EVENT_IDENTIFIER } from \"./ApiEvent\";\r\nimport { Logger } from \"../Logger\";\r\nimport HttpEvent from \"./HttpEvent\";\r\n\r\n// for use in cache events\r\nconst MSAL_CACHE_EVENT_VALUE_PREFIX = \"msal.token\";\r\nconst MSAL_CACHE_EVENT_NAME = \"msal.cache_event\";\r\n\r\nconst createEventKey = (event: TelemetryEvent): string => (\r\n    `${event.telemetryCorrelationId}-${event.eventId}-${event.eventName}`\r\n);\r\n\r\nexport default class TelemetryManager {\r\n\r\n    // correlation Id to list of events\r\n    private completedEvents: CompletedEvents = {};\r\n    // event key to event\r\n    private inProgressEvents: InProgressEvents = {};\r\n    // correlation id to map of eventname to count\r\n    private eventCountByCorrelationId: EventCountByCorrelationId = {};\r\n\r\n    // Implement after API EVENT\r\n    private onlySendFailureTelemetry: boolean = false;\r\n    private telemetryPlatform: TelemetryPlatform;\r\n    private clientId: string;\r\n    private telemetryEmitter: TelemetryEmitter;\r\n\r\n    constructor(config: TelemetryConfig, telemetryEmitter: TelemetryEmitter) {\r\n        // TODO THROW if bad options\r\n        this.telemetryPlatform = {\r\n            sdk: Constants.libraryName,\r\n            sdkVersion: libraryVersion(),\r\n            networkInformation: {\r\n                // @ts-ignore\r\n                connectionSpeed: navigator && navigator.connection && navigator.connection.effectiveType\r\n            },\r\n            ...config.platform\r\n        };\r\n        this.clientId = config.clientId;\r\n        this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\r\n        /*\r\n         * TODO, when i get to wiring this through, think about what it means if\r\n         * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\r\n         * optional?\r\n         */\r\n        this.telemetryEmitter = telemetryEmitter;\r\n    }\r\n\r\n    static getTelemetrymanagerStub(clientId: string) : TelemetryManager {\r\n        const applicationName = \"UnSetStub\";\r\n        const applicationVersion = \"0.0\";\r\n        const telemetryEmitter = () => {};\r\n        const telemetryPlatform: TelemetryPlatform = {\r\n            applicationName,\r\n            applicationVersion\r\n        };\r\n        const telemetryManagerConfig: TelemetryConfig = {\r\n            platform: telemetryPlatform,\r\n            clientId: clientId\r\n        };\r\n\r\n        return new this(telemetryManagerConfig, telemetryEmitter);\r\n    }\r\n\r\n    startEvent(event: TelemetryEvent) {\r\n        if (!this.telemetryEmitter) {\r\n            return;\r\n        }\r\n        const eventKey = createEventKey(event);\r\n        this.inProgressEvents[eventKey] = event;\r\n    }\r\n\r\n    stopEvent(event: TelemetryEvent) {\r\n        const eventKey = createEventKey(event);\r\n        if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {\r\n            return;\r\n        }\r\n        event.stop();\r\n        this.incrementEventCount(event);\r\n\r\n        const completedEvents = this.completedEvents[event.telemetryCorrelationId];\r\n\r\n        this.completedEvents[event.telemetryCorrelationId] = [...(completedEvents || []), event];\r\n\r\n        delete this.inProgressEvents[eventKey];\r\n    }\r\n\r\n    flush(correlationId: string): void {\r\n\r\n        // If there is only unfinished events should this still return them?\r\n        if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\r\n            return;\r\n        }\r\n\r\n        const orphanedEvents = this.getOrphanedEvents(correlationId);\r\n        orphanedEvents.forEach(event => this.incrementEventCount(event));\r\n        const eventsToFlush: Array<TelemetryEvent> = [\r\n            ...this.completedEvents[correlationId],\r\n            ...orphanedEvents\r\n        ];\r\n\r\n        delete this.completedEvents[correlationId];\r\n        const eventCountsToFlush: EventCount = this.eventCountByCorrelationId[correlationId];\r\n\r\n        delete this.eventCountByCorrelationId[correlationId];\r\n        // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\r\n\r\n        if (!eventsToFlush || !eventsToFlush.length) {\r\n            return;\r\n        }\r\n\r\n        const defaultEvent: DefaultEvent = new DefaultEvent(\r\n            this.telemetryPlatform,\r\n            correlationId,\r\n            this.clientId,\r\n            eventCountsToFlush\r\n        );\r\n\r\n        const eventsWithDefaultEvent = [ ...eventsToFlush, defaultEvent ];\r\n\r\n        this.telemetryEmitter(eventsWithDefaultEvent.map(e => e.get()));\r\n    }\r\n\r\n    createAndStartApiEvent(correlationId: string, apiEventIdentifier: API_EVENT_IDENTIFIER, logger: Logger): ApiEvent {\r\n        const apiEvent = new ApiEvent(correlationId, logger, apiEventIdentifier);\r\n        this.startEvent(apiEvent);\r\n        return apiEvent;\r\n    }\r\n\r\n    stopAndFlushApiEvent(correlationId: string, apiEvent: ApiEvent, wasSuccessful: boolean, errorCode?: string): void {\r\n        apiEvent.wasSuccessful = wasSuccessful;\r\n        if (errorCode) {\r\n            apiEvent.apiErrorCode = errorCode;\r\n        }\r\n        this.stopEvent(apiEvent);\r\n        this.flush(correlationId);\r\n    }\r\n\r\n    createAndStartHttpEvent(correlation: string, httpMethod: string, url: string): HttpEvent {\r\n        console.log(url);\r\n        const httpEvent = new HttpEvent(correlation);\r\n        httpEvent.url = url;\r\n        httpEvent.httpMethod = httpMethod;\r\n        this.startEvent(httpEvent);\r\n        return httpEvent;\r\n    }\r\n\r\n    private incrementEventCount(event: TelemetryEvent): void {\r\n        /*\r\n         * TODO, name cache event different?\r\n         * if type is cache event, change name\r\n         */\r\n        const eventName = event.eventName;\r\n        const eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\r\n        if (!eventCount) {\r\n            this.eventCountByCorrelationId[event.telemetryCorrelationId] = {\r\n                [eventName]: 1\r\n            };\r\n        } else {\r\n            eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\r\n        }\r\n    }\r\n\r\n    private getOrphanedEvents(correlationId: string): Array<TelemetryEvent> {\r\n        return Object.keys(this.inProgressEvents)\r\n            .reduce((memo, eventKey) => {\r\n                if (eventKey.indexOf(correlationId) !== -1) {\r\n                    const event = this.inProgressEvents[eventKey];\r\n                    delete this.inProgressEvents[eventKey];\r\n                    return [...memo, event];\r\n                }\r\n                return memo;\r\n            }, []);\r\n    }\r\n}\r\n","import { EVENT_NAME_PREFIX, TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\r\nimport TelemetryEvent from \"./TelemetryEvent\";\r\nimport { EventCount, TelemetryPlatform } from \"./TelemetryTypes\";\r\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\r\n\r\nexport default class DefaultEvent extends TelemetryEvent {\r\n    // TODO Platform Type\r\n    constructor(platform: TelemetryPlatform, correlationId: string, clientId: string, eventCount: EventCount) {\r\n        super(prependEventNamePrefix(\"default_event\"), correlationId);\r\n        this.event[prependEventNamePrefix(\"client_id\")] = clientId;\r\n        this.event[prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\r\n        this.event[prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\r\n        this.event[prependEventNamePrefix(\"application_name\")] = platform.applicationName;\r\n        this.event[prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\r\n        this.event[prependEventNamePrefix(\"effective_connection_speed\")] = platform.networkInformation && platform.networkInformation.connectionSpeed;\r\n        this.event[`${TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey}`] = this.getEventCount(prependEventNamePrefix(\"ui_event\"), eventCount);\r\n        this.event[`${TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey}`] = this.getEventCount(prependEventNamePrefix(\"http_event\"), eventCount);\r\n        this.event[`${TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey}`] = this.getEventCount(prependEventNamePrefix(\"cache_event\"), eventCount);\r\n        // / Device id?\r\n    }\r\n\r\n    private getEventCount(eventName: string, eventCount: EventCount): number {\r\n        if (!eventCount[eventName]) {\r\n            return 0;\r\n        }\r\n        return eventCount[eventName];\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Account } from \"./Account\";\r\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\r\nimport { StringDict } from \"./MsalTypes\";\r\n\r\n/**\r\n * @link AuthenticationParameters}AuthenticationParameters\r\n */\r\nexport type AuthenticationParameters = {\r\n    scopes?: Array<string>;\r\n    extraScopesToConsent?: Array<string>;\r\n    prompt?: string;\r\n    extraQueryParameters?: StringDict;\r\n    claimsRequest?: string;\r\n    authority?: string;\r\n    state?: string;\r\n    correlationId?: string;\r\n    account?: Account;\r\n    sid?: string;\r\n    loginHint?: string;\r\n    forceRefresh?: boolean;\r\n    redirectUri?: string;\r\n    redirectStartPage?: string;\r\n};\r\n\r\nexport function validateClaimsRequest(request: AuthenticationParameters) {\r\n    if (!request.claimsRequest) {\r\n        return;\r\n    }\r\n    let claims;\r\n    try {\r\n        claims = JSON.parse(request.claimsRequest);\r\n    } catch (e) {\r\n        throw ClientConfigurationError.createClaimsRequestParsingError(e);\r\n    }\r\n\r\n    // TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n}\r\n"],"sourceRoot":""}